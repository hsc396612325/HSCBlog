<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 冰炭不投day的博客</title>
    <link>http://blog.bingtan.online/categories/Android/</link>
    <description>Recent content in Android on 冰炭不投day的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 May 2019 22:40:54 +0800</lastBuildDate>
    
	<atom:link href="http://blog.bingtan.online/categories/Android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android之IPC6————Binder3 Framework层分析</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 06 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>一.概述 在前两篇我们分析了Binder在Native层的实现，我们今天来看在Framework层，Binder相关的内容，这一篇也是以注册服务和获取服务来看Binder的流程。 bidner在Framework层，采用JNI技术来调用native层的binder架构，从而为上层应用</description>
    </item>
    
    <item>
      <title>Android之IPC5————Binder2 Native层分析</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 在上一篇里，我们介绍了binder机制的简单介绍，以及binder内核，ServiceManager的启动。 在上一篇也简单提过，ServiceManager的作用，即注册服务，和获取服务。 在这一篇中，我们中 主要分析native层，主要分析其注册服务和获取服务的过程，大致流</description>
    </item>
    
    <item>
      <title>Android之IPC4————Binder1 概述与Bander驱动</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Binder1-%E6%A6%82%E8%BF%B0%E4%B8%8EBinder%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Sat, 04 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Binder1-%E6%A6%82%E8%BF%B0%E4%B8%8EBinder%E9%A9%B1%E5%8A%A8/</guid>
      <description>一.概述 最近才看AndroidIPC中，Binder一直是绕不过的坎，他是AndroidIPC很重要的一种方式，在Android系统中也有着举足轻重的作用。在之前的博客里，特别是AIDL中，我们只是说了AIDL实际上是实现的binder的接口。也在文章的最后简单说了一下，bind</description>
    </item>
    
    <item>
      <title>Android之IPC3————序列化</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 03 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>一.前言 说起序列化，大家应该都不会陌生，在Android中的应用也比较多，特别是在Activity直接传递对象时。就需要使用序列化，我一般是使用Serialization对对象进行序列化，然后进行传递。而在上篇文章中，在使用AIDL时，对跨进程传递的对象也进行了序列化，当时我们使</description>
    </item>
    
    <item>
      <title>Android之IPC2————AIDL</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</link>
      <pubDate>Thu, 02 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</guid>
      <description>一.AIDL概述 在上一篇博客中，我们讨论Service绑定时，所用的三种方法，即扩展的binder类，Messenger类，还有AIDL，上一章博客中当时我们只是简单的介绍了一下。在这里我们就详细的来看一看。 1.AIDL是什么 AIDL即Android接口定义语言，是IDL语言的一</description>
    </item>
    
    <item>
      <title>Android之IPC1————Service</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</link>
      <pubDate>Wed, 01 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</guid>
      <description>一.Service的概述 最近打算看看AndroidIPC相关的内容，并进行总结。所以就先从IPC中很常用的Service开始。 Service作为Android四大组件之一，但并不想Activity一样，有很多的接触，对于我来言，大概只有在使用通知时用过它。接下来简单看一下Serv</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 11————Rxjava源码阅读3</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-11Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB3/</link>
      <pubDate>Thu, 11 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-11Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB3/</guid>
      <description>一.目录 @[toc] 二.目的 这次分析源码有如下目的： 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 知道操作符值怎么实现的 知道线程调度如何实现的 背压Flowable是如何实现的 1~5点之前文章都分析，本文主要</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 10————Rxjava源码阅读2 </title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-10Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB2/</link>
      <pubDate>Wed, 10 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-10Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB2/</guid>
      <description>一. 目录 @[toc] 二. 目的 如上篇文章所说，这次看源码有如下目的： 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 何时将源头和终点关联起来的 知道线程调度如何实现的 背压Flowable是如何实现的 上篇文章中，分</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 9————Rxjava源码阅读1</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-9Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB1/</link>
      <pubDate>Tue, 09 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-9Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB1/</guid>
      <description>一.目录 @[toc] 二.目的 这次分析源码有如下目的： 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 知道操作符值怎么实现的 知道线程调度如何实现的 背压Flowable是如何实现的 本文的目的是1，2，3点。下一篇</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 8————Rxjava 背压策略</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-8Rxjava-%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 08 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-8Rxjava-%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5/</guid>
      <description>一.目录 @[toc] 注:本文大部分参考Android RxJava ：图文详解 背压策略 二.背压的引入 1.同步订阅 定义：观察者和被观察者处于同一线程里。 被观察者发送事件的特点：被观察者没发送一个事件，必须等到观察者接收并处理后，才能继续发送下一个事件。 2.异步订阅 定义：观察者和被观察者处于不同的线程中。 被</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 7————Rxjava 条件操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-7Rxjava-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Sun, 07 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-7Rxjava-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一. 目录 @[toc] 二. 概述 1.作用 通过设置函数，判断被观察者（Observable）发送的事件是否符合条件 2.类型 三. 具体操作符详解 1.all（） 作用：判定是否Observable发射的所有数据都满足某个条件 具体使用： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 private void rxJavaDemo10() { Observable.just(1, 2, 3, 4, 5). all(new Predicate&amp;lt;Integer&amp;gt;() { @Override public boolean test(Integer integer) throws Exception</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 6————Rxjava 功能操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-6Rxjava-%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Sat, 06 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-6Rxjava-%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一.目录 @[toc] 二.概述 1.作用 辅助被观察者在发送事件是实现一些实时功能性的需求 2.类型 RxJava 2 中，常见的功能性操作符 主要有： 三.线程调度 1.subscribeOn() 作用：指定被观察者的线程，有一点需要注意就是如果多次调用此方法，只有第一次有效。 具体使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;()</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 5————Rxjava 过滤操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-5Rxjava-%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Fri, 05 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-5Rxjava-%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一. 目录 @[toc] 二. 概述 1.作用 过滤 / 筛选 被观察者（Observable）发送的事件 &amp;amp; 观察者 （Observer）接收的事件 2.类型 三. 根据指定事件条件过滤事件 1. filter() 作用：通过一定逻辑来过滤被观察者发送的事件，如果返回true则发送事件，否则不会发送 应用场景：筛选符合要求的事件 原理图： 具体</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 4————Rxjava 创建操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-4Rxjava-%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Thu, 04 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-4Rxjava-%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一.目录 @[toc] 二.概述 1.作用 创建 被观察者（ Observable） 对象 &amp;amp; 发送事件。 2. 类型 三.组合多个被观察者 1.concat()/concatArray() 作用：组合多个被观察者一起发送数据，合并后 按发送顺序串行执行 两者区别:组合被观察者的数量，即concat（）组合被观察者数量≤4个，而concatArray（）则可＞4个 原理</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 3————Rxjava 变换操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-3Rxjava-%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Wed, 03 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-3Rxjava-%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一. 目录 @[toc] 二.概述 1.作用 对事件序列中的事件 / 整个事件序列 进行加工处理（即变换），使得其转变成不同的事件 / 整个事件序列 2. 类型 常见的变化操作符如下 三.对应操作符的介绍 1.Map() 作用：对Observable发射的每一项数据应用一个函数，执行变换操作 应用场景：数据类型转化 [外链图片转存失败,源</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 2————Rxjava 创建操作符</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-2Rxjava-%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Tue, 02 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-2Rxjava-%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>一.目录 @[toc] 二.概述 1.作用 创建 被观察者（ Observable） 对象 &amp;amp; 发送事件。 2. 类型 三.基本创建 需求场景: 完整的创建被观察者对象 1. create（） 你可以使用Create操作符创建一个完整的Observable，可以传递onNext，onError和onCompleted等事件。 代</description>
    </item>
    
    <item>
      <title>Android之Rxjava2.X 1————Rxjava概述</title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-1Rxjava%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Apr 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-1Rxjava%E6%A6%82%E8%BF%B0/</guid>
      <description>一.目录 @[toc] 二.前言 这个暑假看的最多内容也就是Rxjava相关的内容，虽然网上目前关于Rxjava的文章挺多的，但还是想自己总结一下，这个系列预计分为3个部分，概述，操作符，应用。文章内容会参考其他博主优秀的文章，也会在文末给出参考博文的地址。同时也参考了一下Rxjava的文档。 三</description>
    </item>
    
    <item>
      <title>Android之View篇6————仿陌陌卡片左右滑动选择控件</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 06 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</guid>
      <description>一.目录 @[toc] 二.效果图 三.业务需求梳理 卡片随着手指的移动进行移动 卡片在移动过程中，随着距离的加大，卡片绕z轴旋转 判断手指的移动方向，显示选择/删除图标，同时图标随距离的增大，透明度增加 手指离开卡片后，根据移动的距离，判断卡片是否移出屏幕，从左边移动还是右边移动 显示的卡片移出完后，增</description>
    </item>
    
    <item>
      <title>Android之View篇5————自定义View</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</link>
      <pubDate>Tue, 05 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</guid>
      <description>一.目录 @[toc] 二.自定义View的分类 1.继承View重写onDraw方法 主要用来实现一些不规则的效果，这种效果不方便用布局组合的方式达到，通常需要静态或者动态的显示一些不规则的图形，这种需要绘制的需要自己支持wrap_content,并支持padding。 2.继承ViewGroup</description>
    </item>
    
    <item>
      <title>Android之View篇4————View的工作原理</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 04 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>一. 目录 @[toc] 二. 初识DecorView和ViewRoot 1. DecorView DecorView是整个Window界面的最顶层View。DecorView只有一个子元素为LinearLayout。代表整个Window界面，包含通知栏，标题栏，内容显示栏三块区域。LinearLayout里有两个Fra</description>
    </item>
    
    <item>
      <title>Android之View篇3————View滑动冲突的解决</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sun, 03 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>一. 目录 @[toc] 二. 前言 滑动冲突也算是在开发中经常遇到的问题，在去年做Everyday时，就碰到过这个问题，当时在百度中找到了问题的解决方法，只不过一直处于不知其所以然。今天我就想系统的整理下关于滑动冲突的解决。 阅读本篇前，建议阅读我的前一篇博客,View的事件分发机制。滑动冲突的解决</description>
    </item>
    
    <item>
      <title>Android之View篇2————View的事件分发</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</guid>
      <description>一.目录 @[toc] 二.事件分发的基础认识 1. 事件分发是什么 事件分发就是对MotionEvent事件进行分发的过程，即当一个MotionEvent产生后，系统需要把这个事件传递(处理)给一个具体的View，这个过程就是分发过程。 2. 事件分发的简单过程 当一个点击事件产生后，一般顺序事件先传递到A</description>
    </item>
    
    <item>
      <title>Android之View篇1————初识View</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</link>
      <pubDate>Fri, 01 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</guid>
      <description>一. 目录 @[toc] 二. View的基础知识 1.什么是View View是所有Android中所有控件的基类，是界面层次上的一种抽象 2.View的位置参数 3.MotionEvent MotionEvent是指触屏事件(Touch事件)的相关细节（触摸发生的时间，位置）包装而成，典型的事件有以下几类: 事件类型 具体动作 ACTION 按</description>
    </item>
    
    <item>
      <title>Android之网络请求11————Retrofit的源码分析</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 前两篇文章主要分析了Retrofit的应用，这一篇主要分析的源码。在分析源码的时候，发现了一篇很好的博客，以及一个讲解视频，这里分享给大家 Retrofit分析-漂亮的解耦套路(视频版) Android：手把手带你 深入读懂 Retrofit 2.0 源码 二.Retrofit的大致流程分析 一般网络请求</description>
    </item>
    
    <item>
      <title>Android之网络请求10————Retrofit的进阶使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 10 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>一.前言 上一节中我们对Retrofit进行了介绍，包括他的简单使用和注解。这一篇我们学习他的进阶使用，包括文件图片Json字符串的上传，以及大文件的断点下载，还有和Rxjava的混合使用 准备工作： 添加依赖 设置权限 二.Retrfit文件上传 1.创建描述网络请求的接口 1 2 3 4 5 6 public interface</description>
    </item>
    
    <item>
      <title>Android之网络请求9————Retrofit的简单使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 09 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>一.Retrofit的介绍 Retreofit是什么，根据其官方文档的介绍，他就是一个适用于 Android 和 Java 的类型安全的 HTTP 客户端。特别说明Retrofit网络请求本质是有OkHttp完成的，而Retrofit仅负责网络请求接口的封装。 二.Retrofit的简单使用 Retrofit的简单使用我</description>
    </item>
    
    <item>
      <title>Android之网络请求8————OkHttp源码5:缓存相关</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 08 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</guid>
      <description>一.前言 这是OKHttp的源码分析第五篇，主要分析的是OKHttp的缓存相关。在前面的文章中，我们也简单写过OKHttp的缓存相关。在Android之网络请求2————OkHttp的基本使用 中写了如何使用缓存。在Android之网络请求6————OkHttp源码3:拦截器链 中写了</description>
    </item>
    
    <item>
      <title>Android之网络请求7————OkHttp源码4:网络操作</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 07 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</guid>
      <description>一.前言 关于OkHttp的源码已经写了3篇了,Android之网络请求4————OkHttp源码1:框架这一篇主要分析了，OkHttp的整体框架。在Android之网络请求5————OkHttp源码2:发送请求这一篇中分析了异步和同步请求是如何经过Dispatcher到getRe</description>
    </item>
    
    <item>
      <title>Android之网络请求6————OkHttp源码3:拦截器</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</link>
      <pubDate>Wed, 06 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</guid>
      <description>一.目的 本篇博客主要分析的是OkHttp获取响应的过程，以及拦截器链. 二.getResponseWithInterceptorChain方法 在上篇博客里，同步和异步响应中都出现了getResponseWithInterceptorChain方法，这一篇博客就接那里继续分析。 1 2 3</description>
    </item>
    
    <item>
      <title>Android之网络请求5————OkHttp源码2:发送请求</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 05 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
      <description>一.目的 这一篇博客主要是分析，OkHttp使用时提供的Call,OkHttpChile类，以及OkHttp发送请求时，Dispatch调度器调度过程。同时简单分析同步，异步请求的执行流程。 如图是一个简单的同步请求的OkHttp的示例。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 new</description>
    </item>
    
    <item>
      <title>Android之网络请求4————OkHttp源码1:框架</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 04 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</guid>
      <description>一.目的 本次阅读源码的目的有以下目的： 发生请求的过程 接收响应的过程 网络操作的实现 缓存的实现 多路复用的实现 在接下来的几篇文章中，结合源码和多篇优先的文章一同分析这些问题。 关于OKHttp的使用可以看前面的文章 二.总体框架 上图是OkHttp的总体架构，大致可以分为以下几层： Inter</description>
    </item>
    
    <item>
      <title>Android之网络请求3————OkHttp的拦截器和封装</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 03 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</guid>
      <description>一.OkHttp拦截器概述 关于OKHttp更多详细的内容，可以参考官网OKHttp官网 在OKHttp中，中Interceptors拦截器是一种强大的机制，可以监视，重写和重试Call请求。 1.OkHttp的拦截器的作用： 拦截器可以一次性对所有请求的返回值进行修改 拦截器可以一次性对</description>
    </item>
    
    <item>
      <title>Android之网络请求2————OkHttp的使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 02 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>一.OkHttp的介绍 建议先阅读上一篇关于Http协议的文章后，在阅读这一篇 1. 概述 okhttp是一个第三方类库，用于Android中请求网络 这是一个开源项目,是安卓端最火热的轻量级框架,由移动支付Square公司贡献(该公司还贡献了Picasso和LeakCanary) 。用于替代</description>
    </item>
    
    <item>
      <title>Android之网络请求1————HTTP协议</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 01 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</guid>
      <description>一.http协议简介 1.http简介 HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 2.</description>
    </item>
    
    <item>
      <title>Android之RemoteViews篇下————RemoteViews的内部机制</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E4%B9%8BRemoteViews%E7%AF%87%E4%B8%8BRemoteViews%E7%9A%84%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 12 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E4%B9%8BRemoteViews%E7%AF%87%E4%B8%8BRemoteViews%E7%9A%84%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6/</guid>
      <description>一.remoteViews概述 上一篇博客中讲了通知栏和桌面小部件的简单使用，它们分别由otificationManager和AppWidgetProvider管理，而NotificationManager和AppWidgetProvider通过Binder分别为SystemSer</description>
    </item>
    
    <item>
      <title>Android之RemoteViews篇上————通知栏和桌面小控件</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E4%B9%8BRemoteViews%E7%AF%87%E4%B8%8A%E9%80%9A%E7%9F%A5%E6%A0%8F%E5%92%8C%E6%A1%8C%E9%9D%A2%E5%B0%8F%E6%8E%A7%E4%BB%B6/</link>
      <pubDate>Wed, 11 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E4%B9%8BRemoteViews%E7%AF%87%E4%B8%8A%E9%80%9A%E7%9F%A5%E6%A0%8F%E5%92%8C%E6%A1%8C%E9%9D%A2%E5%B0%8F%E6%8E%A7%E4%BB%B6/</guid>
      <description>一.RemoteViews的概述 RemoteView从名字看即为远程的View，RemoteViews表示一个View结构，它可以在其他进程中显示，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于跨进程更新它的界面。 RemoteViews在Android的使用</description>
    </item>
    
    <item>
      <title>Android之辅助服务下篇————AccessibilityServic源码分析</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E4%B9%8B%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%AF%87AccessibilityServic%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 10 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E4%B9%8B%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%AF%87AccessibilityServic%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 在上一篇博客中，我介绍了辅助服务的大致使用。这一篇我们来看看AccessibilityServic的原理。 通过上篇，我们知道将AccessibilityServic配置完成后。之后的使用可以分为下面三个步骤 onAccessibilityEvent接收事件(屏幕变化，点击事</description>
    </item>
    
    <item>
      <title>Android之辅助服务上篇————AccessibilityService使用</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E4%B9%8B%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1%E4%B8%8A%E7%AF%87AccessibilityService%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 09 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E4%B9%8B%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1%E4%B8%8A%E7%AF%87AccessibilityService%E4%BD%BF%E7%94%A8/</guid>
      <description>一.前言 最近好久没写博客了，特别是Android系统启动这一个系列，虽然过程已经理了很多遍了，但是由于实习期间是在抽不出时间，没办法输出文章。最近接触了Android辅助服务，即AccessibilityService的相关内容，也算是解决了我一直一来的困惑——微信抢红包插件是怎</description>
    </item>
    
    <item>
      <title>Android源码阅读————GestureDetectory</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BBGestureDetectory/</link>
      <pubDate>Sun, 08 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BBGestureDetectory/</guid>
      <description>一.前言 目前接触Android也差不多一年了，一直处于知其然不知其所以然，所以也是希望从源码的角度出发，理解更多关于Android的知识。 这个系列我希望可以一直写下去，增强我对Android的理解。 开头的第一篇我选择了一个不是很长的源码，GestureDetector手势控制器来</description>
    </item>
    
    <item>
      <title>Android学习笔记————Activity的生命周期和启动模式</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 07 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>一.Activity的生命周期 1.与Activity生命周期相关的七个函数 onCreate(): 表示Activity正在被创建，这是生命周期的第一个方法，在这个方法中我们可以做一些初始化工作，比如调用setContentView去加载界面布局资源，初始化Activity所需数据 onRestart(): 表示Activity</description>
    </item>
    
    <item>
      <title>Android小项目————聊天室（网络编程篇)</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AF%87/</link>
      <pubDate>Thu, 05 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AF%87/</guid>
      <description>一.前言 这是关于聊天室的第二篇博客，内容主要是聊天室的核心篇章，即网络编程，主要是客户端和电脑端的服务器的代码。 二.客户端 步骤 创建一个ClientThread类 数据的流动 当按动发送键时，将数据从EditText中提取出来，通过Handler和Message传递给发送子线程。 发送子</description>
    </item>
    
    <item>
      <title>Android小项目————冰炭不投de小计算器</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%86%B0%E7%82%AD%E4%B8%8D%E6%8A%95de%E5%B0%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
      <pubDate>Wed, 04 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%86%B0%E7%82%AD%E4%B8%8D%E6%8A%95de%E5%B0%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
      <description>一.前言 这是我首个使用java写的app，也在学习郭霖老师的第一行代码和李刚老师的疯狂java讲义之时，进行的练习之作，刚刚学习java和android，有些地方可能并没有做的很完善，希望大家可以多多包涵。 二.环境准备和所需知识点 1. 编译器：Andriod Studio 2. 新建一个项目并选择全部</description>
    </item>
    
    <item>
      <title>Android小项目————聊天室（UI篇）</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE%E8%81%8A%E5%A4%A9%E5%AE%A4UI%E7%AF%87/</link>
      <pubDate>Wed, 04 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%B0%8F%E9%A1%B9%E7%9B%AE%E8%81%8A%E5%A4%A9%E5%AE%A4UI%E7%AF%87/</guid>
      <description>一.前言 这是所做的第二个android项目，主要目的对暑假所学的java和android知识点进行复习巩固和实践，由于知识所限，目前这个聊天室并不是很完善，而且由于对于多线程的相关知识点不太熟练，所以服务器端经常崩，后期会将其更加完善 其中聊天室主界面主要借鉴的是郭霖老师《第一行代</description>
    </item>
    
    <item>
      <title>Android录音下————AudioRecord源码分析</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%BD%95%E9%9F%B3%E4%B8%8BAudioRecord%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 03 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%BD%95%E9%9F%B3%E4%B8%8BAudioRecord%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>一.概述 在上一篇博客中，主要看了AudioRecord的应用。接下来让我们看一看AudioRecord源码的分析。 注：Native层源码版本：android5.1.0 1.主要分析点 分析的时候以上一篇博客AudioRecord使用过程中涉及到的方法来进行分析。主要分析下面几个方法：</description>
    </item>
    
    <item>
      <title>Android录音上————AudioRecord实现录音功能</title>
      <link>http://blog.bingtan.online/posts/Android/Android%E5%BD%95%E9%9F%B3%E4%B8%8AAudioRecord%E5%AE%9E%E7%8E%B0%E5%BD%95%E9%9F%B3%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 02 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android%E5%BD%95%E9%9F%B3%E4%B8%8AAudioRecord%E5%AE%9E%E7%8E%B0%E5%BD%95%E9%9F%B3%E5%8A%9F%E8%83%BD/</guid>
      <description>一.前言 在百度实习的时候，导师让我负责语音助手SDK相关的东西，所以就一直想对其进行整理总结，就先从最基础，最简单AudioRecord类开始。 二.官方文档中的AudioRecord 想要了解一个类的具体说明，首先要看看官方文档： 1.概述 AndioRecordlei类的主要功能是让</description>
    </item>
    
    <item>
      <title>Android MVP应用程序</title>
      <link>http://blog.bingtan.online/posts/Android/Android-MVP%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 01 Jul 2018 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android/Android-MVP%E5%BA%94%E7%94%A8/</guid>
      <description>一.MVP的含义 MVP在我上一个写关于地图的项目时候，在项目开始前也进行过学习，也在项目中也进行了应用。在今年暑假开始写西邮助手的时候，和小伙伴也是计划用MVP打框架。重新查阅资料发现，谷歌官方提供了一个MVP模式的Demo。所以对它进行了学习阅读，同时决定写一篇博客进行记录。 1</description>
    </item>
    
  </channel>
</rss>