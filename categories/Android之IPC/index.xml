<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android之IPC on 冰炭不投day的博客</title>
    <link>http://blog.bingtan.online/categories/Android%E4%B9%8BIPC/</link>
    <description>Recent content in Android之IPC on 冰炭不投day的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 May 2019 22:40:54 +0800</lastBuildDate>
    
	<atom:link href="http://blog.bingtan.online/categories/Android%E4%B9%8BIPC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android之IPC6————Binder3 Framework层分析</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 06 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>一.概述 在前两篇我们分析了Binder在Native层的实现，我们今天来看在Framework层，Binder相关的内容，这一篇也是以注册服务和获取服务来看Binder的流程。 bidner在Framework层，采用JNI技术来调用native层的binder架构，从而为上层应用</description>
    </item>
    
    <item>
      <title>Android之IPC5————Binder2 Native层分析</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 在上一篇里，我们介绍了binder机制的简单介绍，以及binder内核，ServiceManager的启动。 在上一篇也简单提过，ServiceManager的作用，即注册服务，和获取服务。 在这一篇中，我们中 主要分析native层，主要分析其注册服务和获取服务的过程，大致流</description>
    </item>
    
    <item>
      <title>Android之IPC4————Binder1 概述与Bander驱动</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Binder1-%E6%A6%82%E8%BF%B0%E4%B8%8EBinder%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Sat, 04 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Binder1-%E6%A6%82%E8%BF%B0%E4%B8%8EBinder%E9%A9%B1%E5%8A%A8/</guid>
      <description>一.概述 最近才看AndroidIPC中，Binder一直是绕不过的坎，他是AndroidIPC很重要的一种方式，在Android系统中也有着举足轻重的作用。在之前的博客里，特别是AIDL中，我们只是说了AIDL实际上是实现的binder的接口。也在文章的最后简单说了一下，bind</description>
    </item>
    
    <item>
      <title>Android之IPC3————序列化</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 03 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>一.前言 说起序列化，大家应该都不会陌生，在Android中的应用也比较多，特别是在Activity直接传递对象时。就需要使用序列化，我一般是使用Serialization对对象进行序列化，然后进行传递。而在上篇文章中，在使用AIDL时，对跨进程传递的对象也进行了序列化，当时我们使</description>
    </item>
    
    <item>
      <title>Android之IPC2————AIDL</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</link>
      <pubDate>Thu, 02 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</guid>
      <description>一.AIDL概述 在上一篇博客中，我们讨论Service绑定时，所用的三种方法，即扩展的binder类，Messenger类，还有AIDL，上一章博客中当时我们只是简单的介绍了一下。在这里我们就详细的来看一看。 1.AIDL是什么 AIDL即Android接口定义语言，是IDL语言的一</description>
    </item>
    
    <item>
      <title>Android之IPC1————Service</title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</link>
      <pubDate>Wed, 01 May 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</guid>
      <description>一.Service的概述 最近打算看看AndroidIPC相关的内容，并进行总结。所以就先从IPC中很常用的Service开始。 Service作为Android四大组件之一，但并不想Activity一样，有很多的接触，对于我来言，大概只有在使用通知时用过它。接下来简单看一下Serv</description>
    </item>
    
  </channel>
</rss>