<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 冰炭不投day的博客</title>
    <link>http://blog.bingtan.online/categories/Android/</link>
    <description>Recent content in Android on 冰炭不投day的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 02 Mar 2019 22:40:54 +0800</lastBuildDate>
    
	<atom:link href="http://blog.bingtan.online/categories/Android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android之View篇2————View的事件分发</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</guid>
      <description>一.目录 @[toc] 二.事件分发的基础认识 1. 事件分发是什么 事件分发就是对MotionEvent事件进行分发的过程，即当一个MotionEvent产生后，系统需要把这个事件传递(处理)给一个具体的View，这个过程就是分发过程。 2. 事件分发的简单过程 当一个点击事件产生后，一般顺序事件先传递到A</description>
    </item>
    
    <item>
      <title>Android之View篇3————View滑动冲突的解决</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>一. 目录 @[toc] 二. 前言 滑动冲突也算是在开发中经常遇到的问题，在去年做Everyday时，就碰到过这个问题，当时在百度中找到了问题的解决方法，只不过一直处于不知其所以然。今天我就想系统的整理下关于滑动冲突的解决。 阅读本篇前，建议阅读我的前一篇博客,View的事件分发机制。滑动冲突的解决</description>
    </item>
    
    <item>
      <title>Android之View篇4————View的工作原理</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>一. 目录 @[toc] 二. 初识DecorView和ViewRoot 1. DecorView DecorView是整个Window界面的最顶层View。DecorView只有一个子元素为LinearLayout。代表整个Window界面，包含通知栏，标题栏，内容显示栏三块区域。LinearLayout里有两个Fra</description>
    </item>
    
    <item>
      <title>Android之View篇5————自定义View</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</guid>
      <description>一.目录 @[toc] 二.自定义View的分类 1.继承View重写onDraw方法 主要用来实现一些不规则的效果，这种效果不方便用布局组合的方式达到，通常需要静态或者动态的显示一些不规则的图形，这种需要绘制的需要自己支持wrap_content,并支持padding。 2.继承ViewGroup</description>
    </item>
    
    <item>
      <title>Android之View篇6————仿陌陌卡片左右滑动选择控件</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sat, 02 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</guid>
      <description>一.目录 @[toc] 二.效果图 三.业务需求梳理 卡片随着手指的移动进行移动 卡片在移动过程中，随着距离的加大，卡片绕z轴旋转 判断手指的移动方向，显示选择/删除图标，同时图标随距离的增大，透明度增加 手指离开卡片后，根据移动的距离，判断卡片是否移出屏幕，从左边移动还是右边移动 显示的卡片移出完后，增</description>
    </item>
    
    <item>
      <title>Android之View篇1————初识View</title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</link>
      <pubDate>Fri, 01 Mar 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</guid>
      <description>一. 目录 @[toc] 二. View的基础知识 1.什么是View View是所有Android中所有控件的基类，是界面层次上的一种抽象 2.View的位置参数 3.MotionEvent MotionEvent是指触屏事件(Touch事件)的相关细节（触摸发生的时间，位置）包装而成，典型的事件有以下几类: 事件类型 具体动作 ACTION 按</description>
    </item>
    
    <item>
      <title>Android之网络请求11————Retrofit的源码分析</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 前两篇文章主要分析了Retrofit的应用，这一篇主要分析的源码。在分析源码的时候，发现了一篇很好的博客，以及一个讲解视频，这里分享给大家 Retrofit分析-漂亮的解耦套路(视频版) Android：手把手带你 深入读懂 Retrofit 2.0 源码 二.Retrofit的大致流程分析 一般网络请求</description>
    </item>
    
    <item>
      <title>Android之网络请求10————Retrofit的进阶使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 10 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>一.前言 上一节中我们对Retrofit进行了介绍，包括他的简单使用和注解。这一篇我们学习他的进阶使用，包括文件图片Json字符串的上传，以及大文件的断点下载，还有和Rxjava的混合使用 准备工作： 添加依赖 设置权限 二.Retrfit文件上传 1.创建描述网络请求的接口 1 2 3 4 5 6 public interface</description>
    </item>
    
    <item>
      <title>Android之网络请求9————Retrofit的简单使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 09 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>一.Retrofit的介绍 Retreofit是什么，根据其官方文档的介绍，他就是一个适用于 Android 和 Java 的类型安全的 HTTP 客户端。特别说明Retrofit网络请求本质是有OkHttp完成的，而Retrofit仅负责网络请求接口的封装。 二.Retrofit的简单使用 Retrofit的简单使用我</description>
    </item>
    
    <item>
      <title>Android之网络请求8————OkHttp源码5:缓存相关</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 08 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</guid>
      <description>一.前言 这是OKHttp的源码分析第五篇，主要分析的是OKHttp的缓存相关。在前面的文章中，我们也简单写过OKHttp的缓存相关。在Android之网络请求2————OkHttp的基本使用 中写了如何使用缓存。在Android之网络请求6————OkHttp源码3:拦截器链 中写了</description>
    </item>
    
    <item>
      <title>Android之网络请求7————OkHttp源码4:网络操作</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 07 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</guid>
      <description>一.前言 关于OkHttp的源码已经写了3篇了,Android之网络请求4————OkHttp源码1:框架这一篇主要分析了，OkHttp的整体框架。在Android之网络请求5————OkHttp源码2:发送请求这一篇中分析了异步和同步请求是如何经过Dispatcher到getRe</description>
    </item>
    
    <item>
      <title>Android之网络请求6————OkHttp源码3:拦截器</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</link>
      <pubDate>Wed, 06 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</guid>
      <description>一.目的 本篇博客主要分析的是OkHttp获取响应的过程，以及拦截器链. 二.getResponseWithInterceptorChain方法 在上篇博客里，同步和异步响应中都出现了getResponseWithInterceptorChain方法，这一篇博客就接那里继续分析。 1 2 3</description>
    </item>
    
    <item>
      <title>Android之网络请求5————OkHttp源码2:发送请求</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 05 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
      <description>一.目的 这一篇博客主要是分析，OkHttp使用时提供的Call,OkHttpChile类，以及OkHttp发送请求时，Dispatch调度器调度过程。同时简单分析同步，异步请求的执行流程。 如图是一个简单的同步请求的OkHttp的示例。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 new</description>
    </item>
    
    <item>
      <title>Android之网络请求4————OkHttp源码1:框架</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 04 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</guid>
      <description>一.目的 本次阅读源码的目的有以下目的： 发生请求的过程 接收响应的过程 网络操作的实现 缓存的实现 多路复用的实现 在接下来的几篇文章中，结合源码和多篇优先的文章一同分析这些问题。 关于OKHttp的使用可以看前面的文章 二.总体框架 上图是OkHttp的总体架构，大致可以分为以下几层： Inter</description>
    </item>
    
    <item>
      <title>Android之网络请求3————OkHttp的拦截器和封装</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 03 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</guid>
      <description>一.OkHttp拦截器概述 关于OKHttp更多详细的内容，可以参考官网OKHttp官网 在OKHttp中，中Interceptors拦截器是一种强大的机制，可以监视，重写和重试Call请求。 1.OkHttp的拦截器的作用： 拦截器可以一次性对所有请求的返回值进行修改 拦截器可以一次性对</description>
    </item>
    
    <item>
      <title>Android之网络请求2————OkHttp的使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 02 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>一.OkHttp的介绍 建议先阅读上一篇关于Http协议的文章后，在阅读这一篇 1. 概述 okhttp是一个第三方类库，用于Android中请求网络 这是一个开源项目,是安卓端最火热的轻量级框架,由移动支付Square公司贡献(该公司还贡献了Picasso和LeakCanary) 。用于替代</description>
    </item>
    
    <item>
      <title>Android之网络请求1————HTTP协议</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 01 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</guid>
      <description>一.http协议简介 1.http简介 HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 2.</description>
    </item>
    
  </channel>
</rss>