<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>冰炭不投day的博客</title>
    <link>http://blog.bingtan.online/</link>
    <description>Recent content on 冰炭不投day的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 18 Jan 2020 22:35:54 +0800</lastBuildDate>
    
	<atom:link href="http://blog.bingtan.online/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文章导航</title>
      <link>http://blog.bingtan.online/posts/%E6%96%87%E7%AB%A0%E5%AF%BC%E8%88%AA/</link>
      <pubDate>Sat, 18 Jan 2020 22:35:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E6%96%87%E7%AB%A0%E5%AF%BC%E8%88%AA/</guid>
      <description>前言 为了让自己的学习更加有体系化，也同时为了大家的阅读方便，我将自己的博客进行一个汇总分类，同时也会写出下一阶段的计划，让自己更有调理性的学习。 一.Android应用层 1.Android之View篇【完结】 Android之View篇1————初识View Android之View篇</description>
    </item>
    
    <item>
      <title>Android之网络请求11————Retrofit的源码分析</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8211Retrofit%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>一.前言 前两篇文章主要分析了Retrofit的应用，这一篇主要分析的源码。在分析源码的时候，发现了一篇很好的博客，以及一个讲解视频，这里分享给大家 Retrofit分析-漂亮的解耦套路(视频版) Android：手把手带你 深入读懂 Retrofit 2.0 源码 二.Retrofit的大致流程分析 一般网络请求</description>
    </item>
    
    <item>
      <title>Android之网络请求10————Retrofit的进阶使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 10 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%8210Retrofit%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>一.前言 上一节中我们对Retrofit进行了介绍，包括他的简单使用和注解。这一篇我们学习他的进阶使用，包括文件图片Json字符串的上传，以及大文件的断点下载，还有和Rxjava的混合使用 准备工作： 添加依赖 设置权限 二.Retrfit文件上传 1.创建描述网络请求的接口 1 2 3 4 5 6 public interface</description>
    </item>
    
    <item>
      <title>Android之网络请求8————Retrofit的简单使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 09 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%829Retrofit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>一.Retrofit的介绍 Retreofit是什么，根据其官方文档的介绍，他就是一个适用于 Android 和 Java 的类型安全的 HTTP 客户端。特别说明Retrofit网络请求本质是有OkHttp完成的，而Retrofit仅负责网络请求接口的封装。 二.Retrofit的简单使用 Retrofit的简单使用我</description>
    </item>
    
    <item>
      <title>Android之网络请求8————OkHttp源码5:缓存相关</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 08 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%828OkHttp%E6%BA%90%E7%A0%815_%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3/</guid>
      <description>一.前言 这是OKHttp的源码分析第五篇，主要分析的是OKHttp的缓存相关。在前面的文章中，我们也简单写过OKHttp的缓存相关。在Android之网络请求2————OkHttp的基本使用 中写了如何使用缓存。在Android之网络请求6————OkHttp源码3:拦截器链 中写了</description>
    </item>
    
    <item>
      <title>Android之网络请求7————OkHttp源码4:网络操作</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 07 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%827OkHttp%E6%BA%90%E7%A0%814_%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/</guid>
      <description>一.前言 关于OkHttp的源码已经写了3篇了,Android之网络请求4————OkHttp源码1:框架这一篇主要分析了，OkHttp的整体框架。在Android之网络请求5————OkHttp源码2:发送请求这一篇中分析了异步和同步请求是如何经过Dispatcher到getRe</description>
    </item>
    
    <item>
      <title>Android之网络请求6————OkHttp源码3:拦截器</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</link>
      <pubDate>Wed, 06 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%826OkHttp%E6%BA%90%E7%A0%813_%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE/</guid>
      <description>一.目的 本篇博客主要分析的是OkHttp获取响应的过程，以及拦截器链. 二.getResponseWithInterceptorChain方法 在上篇博客里，同步和异步响应中都出现了getResponseWithInterceptorChain方法，这一篇博客就接那里继续分析。 1 2 3</description>
    </item>
    
    <item>
      <title>Android之网络请求5————OkHttp源码2:发送请求</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 05 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%825OkHttp%E6%BA%90%E7%A0%812_%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
      <description>一.目的 这一篇博客主要是分析，OkHttp使用时提供的Call,OkHttpChile类，以及OkHttp发送请求时，Dispatch调度器调度过程。同时简单分析同步，异步请求的执行流程。 如图是一个简单的同步请求的OkHttp的示例。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 new</description>
    </item>
    
    <item>
      <title>Android之网络请求4————OkHttp源码1:框架</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 04 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%824OkHttp%E6%BA%90%E7%A0%811_%E6%A1%86%E6%9E%B6/</guid>
      <description>一.目的 本次阅读源码的目的有以下目的： 发生请求的过程 接收响应的过程 网络操作的实现 缓存的实现 多路复用的实现 在接下来的几篇文章中，结合源码和多篇优先的文章一同分析这些问题。 关于OKHttp的使用可以看前面的文章 二.总体框架 上图是OkHttp的总体架构，大致可以分为以下几层： Inter</description>
    </item>
    
    <item>
      <title>Android之网络请求3————OkHttp的拦截器和封装</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 03 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%823OkHttp%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%B0%81%E8%A3%85/</guid>
      <description>一.OkHttp拦截器概述 关于OKHttp更多详细的内容，可以参考官网OKHttp官网 在OKHttp中，中Interceptors拦截器是一种强大的机制，可以监视，重写和重试Call请求。 1.OkHttp的拦截器的作用： 拦截器可以一次性对所有请求的返回值进行修改 拦截器可以一次性对</description>
    </item>
    
    <item>
      <title>Android之网络请求2————OkHttp的使用</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 02 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%822OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>一.OkHttp的介绍 建议先阅读上一篇关于Http协议的文章后，在阅读这一篇 1. 概述 okhttp是一个第三方类库，用于Android中请求网络 这是一个开源项目,是安卓端最火热的轻量级框架,由移动支付Square公司贡献(该公司还贡献了Picasso和LeakCanary) 。用于替代</description>
    </item>
    
    <item>
      <title>Android之网络请求1————HTTP协议</title>
      <link>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 01 Feb 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Android%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%821HTTP%E5%8D%8F%E8%AE%AE/</guid>
      <description>一.http协议简介 1.http简介 HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 2.</description>
    </item>
    
    <item>
      <title>计算机网络6————加密算法和Https</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C6%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8CHttps/</link>
      <pubDate>Wed, 23 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C6%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8CHttps/</guid>
      <description>一.概述 前两天接连面试腾讯，阿里一面。都被问到了https相关的内容，答得并不满意，所以就打算将其相关的内容整理总结。 在说https之前，先说一下加密算法相关的内容 二.加密算法 加密算法分为两种：即对称加密和非对称加密。 1.对称加密 对称加密：对于对称加密来说。它的加密和解码的密钥是</description>
    </item>
    
    <item>
      <title>计算机网络5————应用层（DNS 和 HTTP）</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5%E5%BA%94%E7%94%A8%E5%B1%82DNS-%E5%92%8C-HTTP/</link>
      <pubDate>Tue, 22 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5%E5%BA%94%E7%94%A8%E5%B1%82DNS-%E5%92%8C-HTTP/</guid>
      <description>一.应用层概述 应用层位于网络体系的最高层 应用层字协议： 定义了运行在不同端系统上的应用程序进程之间如何传递报文，为某一类应用进程提供了通信服务的规则。 二.DNS 1.概述 DNS产生原因: IP地址难于记忆，可使用符号地址，比如用www.hh.edu表示210.28.39.92。网络本身</description>
    </item>
    
    <item>
      <title>计算机网络4————运输层</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Mon, 21 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>一.概述 我们先简单回顾下前面三层的主要作用 物理层：透明传输比特流 数据链路层：在两个相邻结点(主机和路由器，两个路由器)之间透明传数据。 网络层：完成网络中不同端系统之间的数据传输。网络层主要解决的关键问题——路由选择。 接下来我们来看下网络层的上一层，运输层 1.运输层功能 运输层的主要</description>
    </item>
    
    <item>
      <title>计算机网络3————网络层</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
      <pubDate>Sun, 20 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
      <description>一.网络层概述 1.互联 在说网络层之前，我们先说说网络互连的概念，简单来说，就是将多个相同或者不同的以太网，或者无线局域网等等通过路由器连接来构成一个更大的网络(局互联网），来达到更大范围的资源共享。 上图可以看到，以太网和无线局域网，很明显这两种异构的网络采用的是不同的协议，语法，</description>
    </item>
    
    <item>
      <title>计算机网络2————数据链路层</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Sat, 19 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>一.链路层概述 1.链路层的概念 数据链路可以理解为数据传输通道，在物理层和网络层之间，是数据传输中比较重要的一层。物理设备为终端设备间传递传输媒介及连接，但通讯设备之间的传输连接只能在通讯时短暂连接。每次通信都要经过建立通信连接和拆除通信连接两个过程，这种建立起来的数据收发就叫数据</description>
    </item>
    
    <item>
      <title>计算机网络1————基础概念和协议分层</title>
      <link>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8D%8F%E8%AE%AE%E5%88%86%E5%B1%82/</link>
      <pubDate>Fri, 18 Jan 2019 22:40:54 +0800</pubDate>
      
      <guid>http://blog.bingtan.online/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8D%8F%E8%AE%AE%E5%88%86%E5%B1%82/</guid>
      <description>一.计算机网络基础 1.计算机网络 计算机网络将各种计算机通过通信路线和网络设备互联起来，以方便用户共享资源和相互通信。 网络主要有若干结点和连接这些结点的链路组成。结点：计算设备(端系统，中间结点)。链路：物理媒体(路径,跳) 具体的节点和链路含义可以看下面 2.因特网的结构 因特网的结构</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://blog.bingtan.online/about/</link>
      <pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC1Service/</guid>
      <description>Android之IPC1————Service @[toc]
一.Service的概述 最近打算看看AndroidIPC相关的内容，并进行总结。所以就先从IPC中很常用的Service开始。
Service作为Android四大组件之一，但并不想Activity一样，有很多的接触，对于我来言，大概只有在使用通知时用过它。接下来简单看一下Service的相关概念。
官方文档
1.Service的使用时机 Service是四大组件，在应用程序希望不与用户交互的情况下，执行较长运行时间的操作，或者为其他应用程序提供要使用的功能。service也同Activit一样，需要声明AndroidManifest。
2.Service是什么 如官网所言：它有两不是，两特点即
两不是：
 Service不是一个单独的进程，Service对象本身并不意味着它运行在自己的进程；除非另有特别的指定，它将和应用程序运行的同一个进程中。 Service不是一个线程。它并不是一种在主线程之外工作的方法。  两状态：
 启动状态：当应用组件通过调用StartService()启动服务时，服务即处于&amp;quot;启动&amp;quot;状态，一旦启动，服务即可在后台无期限的运行下去，即使启动服务的组件已被销毁也不受影响。除非手动调用才能停止服务，已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。 绑定状态: 当应用组件通过调用bindService() 绑定到服务时，服务即处于“绑定状态”，绑定服务提供了一个客户端-服务器接口，运行组件与服务进行交互，发送请求，获取结果，甚至利用ipc进行跨进程执行这些操作。仅当与另一个组件绑定时，绑定服务才会运行，多组件可以同时绑定到该服务，但全部取消绑定后，该服务会立即被销毁。  二.Service在AndroidManifext的声明 首先来看在AndroidManifest里Service的声明：
1 2 3  &amp;lt;service android:name=&amp;#34;.MyService&amp;#34;&amp;gt; &amp;lt;/service&amp;gt;   其他常见属性的说明
   属性 说明 备注     android:name service的类名    android:label Service的名字 若不设置，默认Service的类名   android:icon Service的图标    android:permission 申明此Service的权限 有提供了该权限的应用才能控制或连接此服务   android;process 表示该服务是否在另一个进程中运行 不设置默认为本地服务；remote：则设置为远程服务   android:enabled 系统默认启动 true：Service将会默认被系统启动，不设置则默认为false   android:exported 该服务是否能够被其他应用程序所控制或连接 不设置默认为false    三.Service的创建与启动 1.Service代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  public class MyService extends Service { private static final String TAG = &amp;#34;MyService&amp;#34;; public MyService() { } /** * 绑定服务时才会调用 * 必须要实现的方法 * @param intent * @return */ @Override public IBinder onBind(Intent intent) { // TODO: Return the communication channel to the service.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC2AIDL/</guid>
      <description>Android之IPC2————AIDL @[toc]
一.AIDL概述 在上一篇博客中，我们讨论Service绑定时，所用的三种方法，即扩展的binder类，Messenger类，还有AIDL，上一章博客中当时我们只是简单的介绍了一下。在这里我们就详细的来看一看。
1.AIDL是什么 AIDL即Android接口定义语言，是IDL语言的一种。主要用来定义跨进程通信时都让双方都认可的编程接口。
 IDL是Interface description language的缩写，指接口描述语言.IDL通常用于远程调用软件。在这种情况下，一般是由远程客户终端调用不同操作系统上的对象组件，并且这些对象组件可能是由不同计算机语言编写的。IDL建立起了两个不同操作系统间通信的桥梁。
 2.使用场景 在Android中，一个进程通常无法访问另一个进程的内存，所以进程需要将其对象分解成操作系统可以识别的原语，并将对象编组成可以跨界.所以在Android中，它常常被用来进行跨进程通信。
3.一些语法 在使用AIDL语言时，需要创建一个.aidl文件，此时AndroidSDK工具都会生成一个.aidl文件的IBinder接口，并且其报存在gen/目录中，Service视情况实现IBinder接口。然后将客户端与Service进行绑定，此时就可以调用IBindr的方法来执行IPC。
创建AIDL时，可以通过可带参数和返回值的一个或多个方法来声明接口。参数和返回值可以时任意类型，甚至可以是其他AIDL生成的接口
默认情况下，AIDL支持下列数据类似：
 JAVA中所有原语类型(如int,long,char,boolean等等) String CharSequence List：List中所有元素都必须是以上列表支持的数据类型，或者其他AIDL生成的接口或者声明的可打包类型。 Map：同List一样，他也要求所有元素都必须是以上列表支持的数据类型，或者其他AIDL生成的接口或者声明的可打包类型。  对于不是默认数据的类型，应该使其实现Parcelable接口，并编写对应的AIDL文件。
定义接口时，注意：
 方法可以带零个或者多个参数，返回值或者NULl 所有原语参数都需要指示数据走向方向标记，可以是in，out或者inout，原语默认是in,慎用inout参数，它会导致系统开销非常大。 aidl 文件中包括的所有代码注释都包含在生成的 IBinder 接口中（import 和 package 语句之前的注释除外） 只客户端调用其中的方法，不支持调用其中的AIDL 中的静态字段。  二.AIDL实现跨进程通信 将一个Book类，在不同进程的客户端和服务中进行传递。
因为Book类并不默认类型，所以首先让它实现Parcelable接口(序列化)
关于序列化的问题，下一篇博客中进行分析。
1.Book实现 Parcelable 接口 创建一个Book类，建立getter和setter
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  public class Book { private String name; private int price; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } @Override public String toString() { return &amp;#34;书名:&amp;#34;+name +&amp;#34;,价格&amp;#34;+price; } public Book() { } }   让其继承 Parcelable 接口，并根据AS的错误提醒，自动补全。或者自己手动补全。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC3%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>Android之IPC3————序列化 @[toc]
一.前言 说起序列化，大家应该都不会陌生，在Android中的应用也比较多，特别是在Activity直接传递对象时。就需要使用序列化，我一般是使用Serialization对对象进行序列化，然后进行传递。而在上篇文章中，在使用AIDL时，对跨进程传递的对象也进行了序列化，当时我们使用的是Parcelable。它也是一种序列化的方法。
在这篇文章里，我分别介绍一下两者的使用以及区别
二.序列化 1.什么是序列化 序列化 (Serialization)将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。
简单来说就是讲对象进行保存，在下次使用时可以顺利还原该对象。
2.序列化保存的内容 对象是类的一个实例，一个类中包含变量和函数两部分。同一个类的不同对象只是变量不同，所以序列化是只保存对象的变量部分。同样，由于静态变量是由一个类的各个对象共用的，所以序列化过程中也不保存。
3.序列化的作用 序列化的用途主要有三个：
 对象的持久化，对象持久化是指延长对象的存在时间，比如通过序列化功能，将对象保存在文件中，就可以延长对象的存在时间，在下次运行程序是再恢复该对象 对象复制,通过序列化后，将对象保存在内存中，可以在用过次数据得到多个对象的副本 对象传输，通过序列化，可以通过网络传递对象，以及跨进程通信。  三.Serialization 1.实现接口 使用Serialization进行序列化，是比较简单的一件事，只要将需要序列化的类实现Serialization接口，并声明一个SerialVersionUID即可，甚至SerialVersionUID也不是必须的。没有它依然可以序列化，只是对反序列化造成影响
下面我们声明一个类，并将它实现Serialization接口
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  public class User implements Serializable { private int userId; private String userName; private boolean isMale; public User(int UserId,String UserName,boolean IsMale){ userId = UserId; userName = UserName; isMale = IsMale; } public int getUserId() { return userId; } public void setUserId(int userId) { this.userId = userId; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public boolean isMale() { return isMale; } public void setMale(boolean male) { isMale = male; } }   2.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Bander1-%E6%A6%82%E8%BF%B0%E4%B8%8EBander%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC4Bander1-%E6%A6%82%E8%BF%B0%E4%B8%8EBander%E9%A9%B1%E5%8A%A8/</guid>
      <description>Android之IPC4————Bander1 概述与Bander驱动 @[toc]
一.概述 最近才看AndroidIPC中，Binder一直是绕不过的坎，他是AndroidIPC很重要的一种方式，在Android系统中也有着举足轻重的作用。在之前的博客里，特别是AIDL中，我们只是说了AIDL实际上是实现的binder的接口。也在文章的最后简单说了一下，binder是如何进行数据通信的。但是由于Binder的封装，我还是没有发现，binder是如何做的跨进程通信的。
在这段时间里，我也是翻看了许多资料，也查看了许多博客。但是，多数博客，要不然讲的只是Frameworks层，要不然只是云里雾里长篇大论，要不然是很简单的描述了一下大体框架。
不过，后来发现一位大神的博客，跟着他的思考路看源码，从Driver层看到native层，再从native看到Frameworks层，看的脑袋很晕，但是收获也很大。所以想将看的过程记录下来，做一个学习笔记。
Binder系列—开篇
二.储备知识 在正式讲之前，先简单介绍一些基础知识
1.进程空间的划分 每个Android的进程中，都只能运行在自己进程所拥有的虚拟地址空间，对应一个4GB的虚拟地址空间，其中3GB是用户空间，1GB是内核空间。当然两者的大小时可以进程跳转的。
用户空间：不同进程之间无法共享
内核空间: 不同进程之间可以共享
2.进程隔离和跨进程通信 进程隔离： 为了保证安全性和独立性，一个进程不能直接操作和访问另一个进程
进程间通信： 不同进程之间传递数据
3.Android的框架 让我们来看一看，Android的整体框架 从下往上依次为：
 内核层:Linux内核和各类硬件设备的驱动，BInderIPC驱动也就是在这一层 硬件抽象层：封装内核层的硬件驱动，提供系统服务层统一的硬件接口 系统层:提供核心服务，并且提供可供「应用程序框架层」调用的接口 BinderIPC层：作为系统服务层与应用程序框架的IPC桥梁，互相传递接口调用的数据，实现跨进层的停下 应用程序框架层：这一层可以理解为 Android SDK，提供四大组件，View 绘制体系等平时开发中用到的基础部件  在上面的层次里，内核层与硬件抽象层均使用C/C++实现，系统服务是以Java实现，硬件层抽象编译为so文件，以jni的形式提供给系统服务层使用，系统服务层中的服务随系统的启动而启动，这些服务提供给手机诸如，短信接收，电话的接听，Activity的管理等等功能。每一个服务都运行在一个独立进程的Dalvik虚拟机中，那么问题来了，开发者的app运行在一个新的进程空间，如果调用系统服务层中的接口呢？答案就是ipc，而Android中大多数的ipc都是通过Binder实现的。
三.Binder概述 1.Binder是什么 Binder中文意思为粘合剂，意思是粘合了两个不同的进程
而在不同的语境下，Binder有不同的含义。
 从机制，模型来说,Binder是指Android中实现Ipc的一种方式。 从模型的结构中来说,Binder来说是一种虚拟的物理层设备，即Binder驱动。 从代码的角度来说，Binder是一个类，实现类IBInder接口。  2.Binder的优势 Android是基于linux的操作系统，而操作系统中已经有了多种IPC机制，为什么还要Binder机制?
看看Linux中现有的IPC机制：
 管道:在创建是分配一个page大小的内存，缓存区比较有限 消息队列:信息复制两次，有额外的CPU消耗，不适合频繁或者信息量大的通信 共享内存:无需复制，共享缓冲区直接付附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决； socket：作为更通用的接口，传输效率低，主要用于不通机器或跨网络的通信；  多个角度说明为什么使用Binder：
 从性能上来说：Binder数据拷贝只需要一次，而管道，消息内存，Socket都需要两次，共享内存不需要。从性能上来说，Binder性能仅次于共享内存。 从稳定性来说，Binder基于c/s架构，架构清晰，稳定性较好 从安全性来说，Binder中，客户端和服务端通信时，会根据UID/PID进行一次安全检查 从语言来说，linux中的机制都是基于c，也就是说面向过程。而android是基于Java,binder也正好是符合面向对象的思想。  3.Binder原理 binder通信采用C/S架构，从组件的角度来说，Binder分为Client，Service，ServiceManager，binder驱动。构架图如下： 图中处理客户端和服务端外，还有两个角色，即ServiceManager和BInder驱动。下面分别简单介绍一下。
 ServiceManager:此处的Service并非指framework层的，而是指Native层的。它是整个Binder通信机制的大管家。它的作用就是给服务端提供注册服务，给客户端提供获取服务的功能。 Binder驱动，binder驱动是一种虚拟字符设备，没有直接操作硬件。它的作用是连接服务端进程，客户端进程，ServiceManager的桥梁。它提供了4个方法。驱动设备的初始化(binder_init)，打开 (binder_open)，映射(binder_mmap)，数据操作(binder_ioctl)  图中出现了IPC时需要的三步，即：
 注册服务:Server进程要先注册Service到ServiceManager。该过程：Server是客户端，ServiceManager是服务端。 获取服务:Client进程使用某个Service前，须先向ServiceManager中获取相应的Service。该过程：Client是客户端，ServiceManager是服务端。 使用服务：Client根据得到的Service信息建立与Service所在的Server进程通信的通路，然后就可以直接与Service交互。该过程：client是客户端，server是服务端。  图中Client，Service，ServiceManager之间交互是虚线表示，但他们都处于不同的进程，所以他们之间并不是真正的交互，而是通过与Binder驱动进行交互，从而实现IPC通信方式。
4.Binder框架 上面的图主要是native层Binder的框架，下面的图是Binder在android中整体框架  图中红色部分表示整个framwork层binder框架相关组件 蓝色组件表示Native层Binder架构相关组件； 上层framework层的Binder逻辑是建立在Native层架构基础之上的，核心逻辑都是交予Native层方法来处理。  Binder涉及的类 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-k5ZmyuPj-1579438039538)(http://gityuan.com/images/binder/java_binder_framework.jpg)]
5. C/S模式 BpBinder(客户端)和BBinder(服务端)都是Android中Binder通信相关的代表，它们都从IBinder类中派生而来，关系图如下：
 客户端：BpBinder.transact()来发送事物请求 服务端：BBinder.onTransact()会接收到相应事务。  四.Binder驱动 1.概述 Binder驱动是Android专用的，但底层的驱动框架和Linux驱动一样，binder驱动在以misc设备进行注册，作为虚拟字符设备，没有直接操作硬件，只是对设备内存的处理。主要操作有：
 通过init()创建/dev/binder设备节点 通过open()获取Binder1驱动文件描述符 通过mmap()在内核上分配一块内存，用于存放数据 通过ioctl()将IPC数据作为参数传递给binder驱动  2.系统调用 用户态程序调用Kernel层驱动是需要陷入内核态，进行系统调用(syscall),比如调用Binder驱动方法调用链为：open-&amp;gt; __open() -&amp;gt; binder_open()。 open()为用户空间的方法，__open()便是系统调用中相应的处理方法，通过查找，对应调用到内核binder驱动的binder_open()方法，至于其他的从用户态陷入内核态的流程也基本一致。
简单来说，当用户空间调用open()方法，最终会调用binder驱动的binder_open()方法，mmap()/ioctl都是如此。
3.binder_open binder_init的主要工作就是注册misc设备。并没有什么可说的，我们就直接从第二个方法来看。
binder_open()作用是打开binder驱动，并进行如下过程：
 创建binder_proc，将当前进程的信息保存保存在binder_porc对象总，该对象管理IPC所需的各种信息并具有其他结构体的根结构体，在把binder_proc对象保存到文件指针filp，以及把binder_proc加入到全局链表binder_procs。 binder_proc结构体中包含了进程节点，binder实体/引用/线程所组成红黑树的根节点，内存信息，线程信息等等  3. binder_mmap 主要功能：首先在内核虚拟地址空间中，申请一块与用户虚拟内存大小相同的内存。在申请一个page大小的物理内存，再讲同一块物理内存分别映射到内核虚拟地址空间个用户虚拟内存空间，从而实现了用户空间的Buffer和内核空间的Buffer同步操作的功能。最后创建一块Binder_buffer对象，并放入当前binder_proc的proc-&amp;gt;buffers链表。
上图就是，使用mmap后的内存机制，虚拟进程地址空间(vm_area_struct))和虚拟内核地址空间(vm_struct)都映射到同一块物理内存空间。当客户端和服务端发送数据是，客户端先从自己的进程空间吧ipc通信数据复制到内核空间，而Server端作为数据接受端与内核共享数据，所以不需要在拷贝数据，而是通过内存地址的偏移量，即可获得内存地址。整个过程只发送一次内存复制。
比较关注的一个点就在，在这其中，空闲的内存块和已用的内存块都是用红黑树记录的。
4.binder_ioctl binder_ioctl()函数负责在两个进程间收发IPC数据和IPC reply数据
 ioctl(文件描述符，ioctl命令，数据类型)
  文件描述符：是通过open()方法打开的binder内核后的返回层。 ioctl命令  header 1 | header 2
row 1 col 1 | row 1 col 2 row 2 col 1 | row 2 col 2</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC5Binder2-Native%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>Android之IPC5————Binder2 Native层分析 @[toc]
一.前言 在上一篇里，我们介绍了binder机制的简单介绍，以及binder内核，ServiceManager的启动。 在上一篇也简单提过，ServiceManager的作用，即注册服务，和获取服务。 在这一篇中，我们中 主要分析native层，主要分析其注册服务和获取服务的过程，大致流程就是获取BpServiceManager，通过它来和Binder驱动进行通信，ServiceManager在死循环中读写事物，对注册服务和获取服务进行处理，并将结果返回给Binder驱动，binder驱动在将结果返回给客户端或服务端。
本篇文章主要以下面几个方面展开：
 获取BpServiceManager Native层的注册服务和获取服务 Binder内核中的注册服务和获取服务 ServiceManager中的注册服务和获取服务的  二.获取BpServiceManager 1.概述  BpServiceManagerton通过接口IServiceManager实现了接口中的业务逻辑函数(获取服务，注册服务)，并通过成员变量mRemote= new BpBinder(0)进行Binder通信工作
 获取BpServiceManager是通过defaultServiceManager()方法来完成，当进程注册服务(addService)或 获取服务(getService)的过程之前，都需要先调用defaultServiceManager()方法来获取gDefaultServiceManager对象。对于gDefaultServiceManager对象，如果存在则直接返回；如果不存在则创建该对象
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  sp&amp;lt;IServiceManager&amp;gt; defaultServiceManager() { if (gDefaultServiceManager != NULL) return gDefaultServiceManager; { AutoMutex _l(gDefaultServiceManagerLock); //加锁  while (gDefaultServiceManager == NULL) { gDefaultServiceManager = interface_cast&amp;lt;IServiceManager&amp;gt;( ProcessState::self()-&amp;gt;getContextObject(NULL)); if (gDefaultServiceManager == NULL) sleep(1); } } return gDefaultServiceManager; }   上面就是获取BpServiceManager的过程
1 2  gDefaultServiceManager = interface_cast&amp;lt;IServiceManager&amp;gt;( ProcessState::self()-&amp;gt;getContextObject(NULL));   上面这行代码就是关键代码，分为3步,即
 ProcessState::self()，获取ProcessState对象，也是单例 getContextObject：获取BpBinder，对于handle = 0的BpBinder对象，存在直接返回，否则创建 获取BpServiceManager对象  2.获取ProcessState对象 1 2 3 4 5 6 7 8 9 10 11  sp&amp;lt;ProcessState&amp;gt; ProcessState::self() { Mutex::Autolock _l(gProcessMutex); if (gProcess != NULL) { return gProcess; } //实例化ProcessState 【见小节2.2】  gProcess = new ProcessState; return gProcess; }   获取ProcessState对象,也是单例模式.
ProcessState的初始化
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ProcessState::ProcessState() : mDriverFD(open_driver()) // 打开Binder驱动【见小节2.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidIPC/Android%E4%B9%8BIPC6Binder3-Framework%E5%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>Android之IPC6————Binder3 Framework层分析 @[toc]
一.概述 在前两篇我们分析了Binder在Native层的实现，我们今天来看在Framework层，Binder相关的内容，这一篇也是以注册服务和获取服务来看Binder的流程。
bidner在Framework层，采用JNI技术来调用native层的binder架构，从而为上层应用提供服务。
 java JNI本意是Java native interface,是为了方便javad调用C,C++等本地代码所封装的异常接口。jni也是JVM规范中的一部份，因此可以将我们写的 JNI 程序在任何实现了 JNI 规范的 Java 虚拟机中运行。 这篇文章主要讲下面几个方面：
  BinderJNI初始化(注册) FrameWork层的注册服务 FrameWork层的获取服务  下面这个是framework的binder类关系图： [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CWYxkjlN-1579438106374)(http://gityuan.com/images/binder/java_binder/class_ServiceManager.jpg)]
二.BinderJNI初始化 在Android系统开机的过程中，Zygote启动时会有一个虚拟机注册过程，该过程调用AndroidRuntime::startReg方法来完成jni方法的注册。
1.注册JNI方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  int AndroidRuntime::startReg(JNIEnv* env) { androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc); env-&amp;gt;PushLocalFrame(200); //注册jni方法 【见下】  if (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) &amp;lt; 0) { env-&amp;gt;PopLocalFrame(NULL); return -1; } env-&amp;gt;PopLocalFrame(NULL); return 0; }   注册jni方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  int register_android_os_Binder(JNIEnv* env) { // 注册Binder类的jni方法【见下】  if (int_register_android_os_Binder(env) &amp;lt; 0) return -1; // 注册BinderInternal类的jni方法【见下】  if (int_register_android_os_BinderInternal(env) &amp;lt; 0) return -1; // 注册BinderProxy类的jni方法【见下】  if (int_register_android_os_BinderProxy(env) &amp;lt; 0) return -1; ... return 0; }   2.注册Binder类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  static int int_register_android_os_Binder(JNIEnv* env) { //其中kBinderPathName = &amp;#34;android/os/Binder&amp;#34;;查找kBinderPathName路径所属类  jclass clazz; clazz = env-&amp;gt;FindClass(kBinderPathName); LOG_FATAL_IF(clazz == NULL, &amp;#34;Unable to find class android.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-10Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-10Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB2/</guid>
      <description>Android之Rxjava2.X 10————Rxjava源码阅读2 一. 目录 @[toc]
二. 目的 如上篇文章所说，这次看源码有如下目的：
 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 何时将源头和终点关联起来的 知道线程调度如何实现的 背压Flowable是如何实现的  上篇文章中，分析了前3点，这篇文章分析3，4点，下一篇分析第6点
三. 操作符源码分析 1.简单的Map操作符例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  Observable.create(new ObservableOnSubscribe&amp;lt;String&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;String&amp;gt; e) throws Exception { e.onNext(&amp;#34;1&amp;#34;); e.onComplete(); } }).map(new Function&amp;lt;String, Integer&amp;gt;() { @Override public Integer apply(String s) throws Exception { return Integer.parseInt(s); } }).subscribe(new Observer&amp;lt;Integer&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;+d); } @Override public void onNext(Integer value) { Log.d(TAG, &amp;#34;onNext: &amp;#34;+value); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;+e); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } });   2.从map开始 1  public final &amp;lt;R&amp;gt; Observable&amp;lt;R&amp;gt; map(Function&amp;lt;? super T, ? extends R&amp;gt; mapper)   小结论： map的调用对象:Observable map的返回对象:Observable 传入参数：Function</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-11Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-11Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB3/</guid>
      <description>Android之Rxjava2.X 11————Rxjava源码阅读3 一.目录 @[toc]
二.目的 这次分析源码有如下目的：
 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 知道操作符值怎么实现的 知道线程调度如何实现的 背压Flowable是如何实现的  1~5点之前文章都分析，本文主要分析第6点
三.源码分析 1.背压Flowable的简单示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  Flowable.create(new FlowableOnSubscribe&amp;lt;Integer&amp;gt;() { @Override public void subscribe(FlowableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception { Log.d(TAG, &amp;#34;发送事件 1&amp;#34;); emitter.onNext(1); Log.d(TAG, &amp;#34;发送事件 2&amp;#34;); emitter.onNext(2); Log.d(TAG, &amp;#34;发送事件 3&amp;#34;); emitter.onNext(3); Log.d(TAG, &amp;#34;发送完成&amp;#34;); emitter.onComplete(); } }, BackpressureStrategy.ERROR ).subscribe(new Subscriber&amp;lt;Integer&amp;gt;() { @Override public void onSubscribe(Subscription s) { Log.d(TAG, &amp;#34;onSubscribe&amp;#34;); s.request(3); } @Override public void onNext(Integer integer) { Log.d(TAG, &amp;#34;接收到了事件&amp;#34; + integer); } @Override public void onError(Throwable t) { Log.w(TAG, &amp;#34;onError: &amp;#34;, t); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete&amp;#34;); } });   2.从create开始 和第一篇一样，先从create开始 create方法
1  public static &amp;lt;T&amp;gt; Flowable&amp;lt;T&amp;gt; create(FlowableOnSubscribe&amp;lt;T&amp;gt; source, BackpressureStrategy mode)   对于Flowable的create方法而言:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-1Rxjava%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-1Rxjava%E6%A6%82%E8%BF%B0/</guid>
      <description>Android之Rxjava2.X 1————Rxjava概述 一.目录 @[toc]
二.前言 这个暑假看的最多内容也就是Rxjava相关的内容，虽然网上目前关于Rxjava的文章挺多的，但还是想自己总结一下，这个系列预计分为3个部分，概述，操作符，应用。文章内容会参考其他博主优秀的文章，也会在文末给出参考博文的地址。同时也参考了一下Rxjava的文档。
三.Rx的概述 1.Rx介绍 ReactiveX是Reactive Extensions的缩写，一般简写为Rx，Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流。Rx的大部分语言库由ReactiveX这个组织负责维护，比较流行的有RxJava/RxJS/Rx.NET，社区网站是 reactivex.io。 ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。
2.Rx的特点 1.使用的观察者模式 2.简化代码
 函数式风格：对可观察数据流使用无副作用的输入输出函数，避免了程序里错综复杂的状态 简化代码 ：Rxjava的操作符通常可以将复杂的难题简化为很少的几行代码 异步错误处理：传统的try/catch没办法处理异步计算，Rx提供了合适的错误处理机制 轻松使用并发：Rx的Observables和Schedulers让开发者可以摆脱底层的线程同步和各种并发问题  3.响应式函数式编程
四.函数响应式编程 1.响应式编程 响应式编程就是与异步数据流交互的编程范式，在响应式编程中，可以将所有的事件视为数据流，比如：点击，悬停，变量。用户输入，属性，换出，数据结构。举个栗子，你可以将自己的微博关注视为数据流，你可以监听这样的数据流，并作出相应的反应。
2.函数响应式编程 函数响应式编程中（Rx中），你可以去调用许多非常棒的函数，去创建，结合，过滤任何一组数据流，这就是&amp;quot;函数式编程&amp;quot;的魔力所在。一个数据流可以作为另一个数据流的输入，甚至多个数据流也可以作为另一个数据流的输入。你可以_合并(merge)_两个数据流，也可以_过滤(filter)_一个数据流得到另一个只包含你感兴趣的事件的数据流，还可以_映射(map)_一个数据流的值到一个新的数据流里。
五.Rxjava的原理 1.扩展的观察者模式 Rxjava的原理基于一种扩展的观察者模型，其实这个模式在android很常见，比如说button的setOnClickListener，就是一个典型的观察者模式，控件button是被观察者（Observable），它产生一个事件(点击)，被观察者OnClickListener接收到，做出相应的处理，而setOnClickListener就是订阅者，它将两者连接起来
Rxjava中扩展的观察者模式 | 角色 | 作用 | 类别 | | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:| &amp;mdash;&amp;ndash;:| |被观察者（Observable） | 产生事件| 控件 | | 观察者（Observer）| 接收事件，并给出响应动作 |OnClickListener| | 订阅（Subscribe） |连接 被观察者 &amp;amp; 观察者 |setOnClickListener| |事件（Event） | 被观察者 &amp;amp; 观察者 沟通的载体 | 控件被点击 |
2.Rxjava的观察者模式流程 RxJava原理可总结为：被观察者 （Observable） 通过 订阅（Subscribe） 按顺序发送事件 给观察者 （Observer）， 观察者（Observer） 按顺序接收事件 &amp;amp; 作出对应的响应动作。具体如下图： 六.Rxjava的基本使用 1. 分步骤实现 该方法主要为了深入说明Rxjava的原理 &amp;amp; 使用，主要用于演示说明，在实际应用中，很少使用（不够优雅简洁：）。 分步骤实现主要分为3步，即创建被观察者，创建观察者，通过订阅将两者链接起来。 步骤1：创建被观察者 （Observable ）&amp;amp; 生产事件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // 1. 创建被观察者 Observable 对象  Observable&amp;lt;Integer&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { // create() 是 RxJava 最基本的创造事件序列的方法  // 此处传入了一个 OnSubscribe 对象参数  //当Observable被订阅时，OnSubscribe的call()方法会自动被调用，即事件序列会一次设定次序本被触发  //即观察者会依此调用对应事件的复写方法从而响应事件  //从而实现被观察者调用了观察者的回调方法&amp;amp;由被观察者向观察者的事件传递  //2.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-2Rxjava-%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-2Rxjava-%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 2————Rxjava 创建操作符 一.目录 @[toc]
二.概述 1.作用 创建 被观察者（ Observable） 对象 &amp;amp; 发送事件。
2. 类型 三.基本创建 需求场景: 完整的创建被观察者对象
1. create（） 你可以使用Create操作符创建一个完整的Observable，可以传递onNext，onError和onCompleted等事件。 代码示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception { e.onNext(1); e.onNext(2); e.onNext(3); } }).subscribe(new Observer&amp;lt;Integer&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;); } @Override public void onNext(Integer integer) { Log.d(TAG, &amp;#34;onNext: &amp;#34;+integer); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;+e); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } });   运行结果 注意:当观察者发送一个Complete/Error事件后，被观察者在，Complrte/Error事件将会继续发送，但观察者收到Complete/Error事件后，不会继续接收任何事件。被观察者可以不发生Complete/Erroe事件
四.快速创建 需求场景：快速的创建被观察者对象
1.just()  作用:快速创建1个被观察者对象（Observable） 发送事件的特点：直接发送传入的事件 注意1:just最多只能发送9个参数 注意2：如果你传递null给Just，它会返回一个发射null值的Observable 代码示例  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  Observable.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-3Rxjava-%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-3Rxjava-%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 3————Rxjava 变换操作符 一. 目录 @[toc]
二.概述 1.作用 对事件序列中的事件 / 整个事件序列 进行加工处理（即变换），使得其转变成不同的事件 / 整个事件序列
2. 类型 常见的变化操作符如下 三.对应操作符的介绍 1.Map()  作用：对Observable发射的每一项数据应用一个函数，执行变换操作 应用场景：数据类型转化 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bDsNsOUP-1579367058397)(https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/map.png)]  代码示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception { emitter.onNext(1); emitter.onNext(2); emitter.onNext(3); } // 使用Map变换操作符中的Function函数对被观察者发送的事件进行统一变换：整型变换成字符串类型  }).map(new Function&amp;lt;Integer,String&amp;gt;() { @Override public String apply(Integer integer) throws Exception { return &amp;#34;使用Map操作符 将事件&amp;#34;+integer+&amp;#34;的参数从 整型&amp;#34;+integer + &amp;#34; 变换成 字符串类型&amp;#34; + integer ; } }).subscribe(new Observer&amp;lt;String&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;开始采用subscribe连接&amp;#34;); } // 默认最先调用复写的 onSubscribe（）  @Override public void onNext(String value) { Log.d(TAG, &amp;#34;接收到了事件&amp;#34; + value); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;对Error事件作出响应&amp;#34;); } @Override public void onComplete() { Log.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-4Rxjava-%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-4Rxjava-%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 4————Rxjava 创建操作符 一.目录 @[toc]
二.概述 1.作用 创建 被观察者（ Observable） 对象 &amp;amp; 发送事件。
2. 类型 三.组合多个被观察者 1.concat()/concatArray()  作用：组合多个被观察者一起发送数据，合并后 按发送顺序串行执行 两者区别:组合被观察者的数量，即concat（）组合被观察者数量≤4个，而concatArray（）则可＞4个  原理图： 具体使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  Observable.concat(Observable.just(1, 2, 3), Observable.just(&amp;#34;z&amp;#34;, &amp;#34;x&amp;#34;, &amp;#34;c&amp;#34;) ).subscribe(new Observer() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;); } @Override public void onNext(Object value) { Log.d(TAG, &amp;#34;onNext: &amp;#34;+value); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } }); }   2.merge()/mergeArray()  作用:组合多个被观察者一起发送数据，合并后 按时间线并行执行 merge()/mergeArray()的区别：组合被观察者的数量，即merge（）组合被观察者数量≤4个，而mergeArray（）则可＞4个 和concat（）操作符的区别:同样是组合多个被观察者一起发送数据，但concat（）操作符合并后是按发送顺序串行执行  原理图： 具体使用：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  Observable.concat( Observable.intervalRange(0, 3, 1, 1, TimeUnit.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-5Rxjava-%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-5Rxjava-%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 5————Rxjava 过滤操作符 一. 目录 @[toc]
二. 概述 1.作用 过滤 / 筛选 被观察者（Observable）发送的事件 &amp;amp; 观察者 （Observer）接收的事件
2.类型 三. 根据指定事件条件过滤事件 1. filter()  作用：通过一定逻辑来过滤被观察者发送的事件，如果返回true则发送事件，否则不会发送 应用场景：筛选符合要求的事件 原理图：   具体使用：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  Observable.just(1,2,3,4,5).filter(new Predicate&amp;lt;Integer&amp;gt;() { @Override public boolean test(Integer integer) throws Exception { return integer % 3 == 1; } }).subscribe(new Observer&amp;lt;Integer&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;); } @Override public void onNext(Integer integer) { Log.d(TAG, &amp;#34;onNext: &amp;#34;+integer); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } });   2.ofType()  作用：ofType是filter操作符的一个特殊形式。它过滤一个Observable只返回指定类型的数据。 原理图：   具体使用:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  Observable.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-6Rxjava-%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-6Rxjava-%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 6————Rxjava 功能操作符 一.目录 @[toc]
二.概述 1.作用 辅助被观察者在发送事件是实现一些实时功能性的需求
2.类型 RxJava 2 中，常见的功能性操作符 主要有： 三.线程调度 1.subscribeOn() 作用：指定被观察者的线程，有一点需要注意就是如果多次调用此方法，只有第一次有效。 具体使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception { Log.e(TAG, &amp;#34;threadName:&amp;#34; + Thread.currentThread().getName()); e.onNext(1); } }).subscribeOn(Schedulers.newThread()) .subscribe(new Observer&amp;lt;Integer&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;); } @Override public void onNext(Integer integer) { Log.d(TAG, &amp;#34;onNext: &amp;#34; + integer); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } });   2.observerOn() 作用: 指定观察者的线程，每指定一次就会生效一次。 具体使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  Observable.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-7Rxjava-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-7Rxjava-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Android之Rxjava2.X 7————Rxjava 条件操作符 一. 目录 @[toc]
二. 概述 1.作用 通过设置函数，判断被观察者（Observable）发送的事件是否符合条件
2.类型 三. 具体操作符详解 1.all（） 作用：判定是否Observable发射的所有数据都满足某个条件 具体使用：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  private void rxJavaDemo10() { Observable.just(1, 2, 3, 4, 5). all(new Predicate&amp;lt;Integer&amp;gt;() { @Override public boolean test(Integer integer) throws Exception { return integer &amp;lt;= 10; } }).subscribe(new Consumer&amp;lt;Boolean&amp;gt;() { @Override public void accept(Boolean aBoolean) throws Exception { Log.d(TAG, &amp;#34;accept: &amp;#34;+aBoolean); } }); }   2.takeWhile（）  作用：发射Observable发射的数据，直到一个指定的条件不成立  原理图： 具体使用
1 2 3 4 5 6 7 8 9 10 11 12 13  Observable.just(1, 2, 3, 4, 5) .takeWhile(new Predicate&amp;lt;Integer&amp;gt;() { @Override public boolean test(Integer integer) throws Exception { return (integer!=3); } }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() { @Override public void accept(Integer integer) throws Exception { Log.d(TAG, &amp;#34;accept: &amp;#34;+integer); } });   3.skipWhile（）  作用:丢弃Observable发射的数据，直到一个指定的条件不成立  原理图: [外链图片转存中&amp;hellip;(img-d2GyVdTj-1579436018931)]</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-8Rxjava-%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-8Rxjava-%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5/</guid>
      <description>Android之Rxjava2.X 8————Rxjava 背压策略 一.目录 @[toc] 注:本文大部分参考Android RxJava ：图文详解 背压策略
二.背压的引入 1.同步订阅  定义：观察者和被观察者处于同一线程里。 被观察者发送事件的特点：被观察者没发送一个事件，必须等到观察者接收并处理后，才能继续发送下一个事件。  2.异步订阅  定义：观察者和被观察者处于不同的线程中。 被观察者发送事件的特点：被观察者不需要等待观察者接收或者处理事件，而是不断发送，直到事件发生完毕。但此时的事件并不会直接发送给观察者。而是存在于缓存区，等待被观察者从中取出事件。  3.存在的问题 在异步订阅的(比如网络请求)，被观察者发生事件的速度太快，观察者来不及接受所有的事件，从而缓存区中的事件越积越多，最终导致缓存区溢出，事件丢失并OOM 比如：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception { int i = 0; while (true) { i++; e.onNext(i); } } }).subscribeOn(Schedulers.newThread()).observeOn(Schedulers.newThread()).subscribe(new Consumer&amp;lt;Integer&amp;gt;() { @Override public void accept(Integer integer) throws Exception { Thread.sleep(5000); System.out.println(integer); } });   而背压策略就是为了解决上述的问题，而引入的
三.背压的概述 1.背压定义 Backpressure，也称为Reactive Pull，就是下游需要多少（具体是通过下游的request请求指定需要多少），上游就发送多少。
2.背压的作用 在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略
3.背压的原理 背压策略的原理：
 对于观察者：响应式拉取，即观察者根据自己的实际需求接受事件 对于被观察者:反馈控制，即被观察者根据观察者的接受能力，从而控制发送事件的速度 对于缓存区：对超出缓存区大小的事件进行丢弃，保留，报错。  四.背压的实现Flowable 1.Flowable 介绍 在Rxjava2.0中，被观察者(Observable)的一种新实现，但和Observable不同之处，在于Flowable实现了非阻塞式背压策略。
2.Flowable 特点  对应的观察者变为Subscriber 所有操作符强制支持背压 默认的缓存区的大小为：128 缓存区的使用队列存放事件  3.Flowable的基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  Flowable.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-9Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidRxjava/Android%E4%B9%8BRxjava2.X-9Rxjava%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB1/</guid>
      <description>Android之Rxjava2.X 9————Rxjava源码阅读1 一.目录 @[toc]
二.目的 这次分析源码有如下目的：
 知道被观察者(Observable)是如何将数据发送出去的 知道观察者(Observer)是如何接收数据的 何时将源头和终点关联起来的 知道操作符值怎么实现的 知道线程调度如何实现的 背压Flowable是如何实现的  本文的目的是1，2，3点。下一篇文章分析4，5点。下下一篇文章分析第6点
三.源码分析 1.简单的Rxjava的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  Observable.create( new ObservableOnSubscribe&amp;lt;String&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;String&amp;gt; e) throws Exception { e.onNext(&amp;#34;1&amp;#34;); e.onComplete(); } }).subscribe(new Observer&amp;lt;String&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;+d); } @Override public void onNext(String value) { Log.d(TAG, &amp;#34;onNext: &amp;#34;+value); } @Override public void onError(Throwable e) { Log.d(TAG, &amp;#34;onError: &amp;#34;+e); } @Override public void onComplete() { Log.d(TAG, &amp;#34;onComplete: &amp;#34;); } });   运行结果: 3.从create开始 create方法：
1  public static &amp;lt;T&amp;gt; Observable&amp;lt;T&amp;gt; create(ObservableOnSubscribe&amp;lt;T&amp;gt; source)   从create方法可以得出
 调用对象：Observable 返回对象：Observable 传入参数: ObservableOnSubscribe 即发射器  查看ObservableOnSubscribe接口
1 2 3 4 5  public interface ObservableOnSubscribe&amp;lt;T&amp;gt; { //其中只有一个方法，这个方法就是我们在create中实现的方法  void subscribe(@NonNull ObservableEmitter&amp;lt;T&amp;gt; e) throws Exception; }   查看subscribe方法的参数:ObservableEmitter</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%871%E5%88%9D%E8%AF%86View/</guid>
      <description>Android之View篇1————初识View 一. 目录 @[toc]
二. View的基础知识 1.什么是View View是所有Android中所有控件的基类，是界面层次上的一种抽象 2.View的位置参数 3.MotionEvent MotionEvent是指触屏事件(Touch事件)的相关细节（触摸发生的时间，位置）包装而成，典型的事件有以下几类:
   事件类型 具体动作     ACTION 按下View   ACTION_MOVE 手指在屏幕上移动   ACTION_UP 手指从屏幕上松开的一瞬间   ACTION_CANCEL 结束事件(非人为原因)   通过MotionEvent对象我们可以得到点击事件的x和y坐标。      getX/getY 相对于View左上角 getRawX/getRawY 相对于手机屏幕左上角  获得MotionEvent的方式:
 在View或Activity中拦截touch events，重写onTouchEvent方法 对于View来说也可以通过setOnTouchListener()方法来监听touch events  特别说明:事件列
 从手指接触屏幕 至 手指离开屏幕，这个过程产生的一系列事件一般情况下，事件列都是以DOWN事件开始、UP事件结束，中间有无数的MOVE事件，如下图：   4.TouchSlop TouchSlop是系统所能识别的被认为是滑动的最小距离。这是个常量，和设备有关，在不同设备上这个值可能是不同的。
在Java代码中获取TouchSlop：ViewConfiguration.get(getContext).getScaledTouchSlop();
5.VelocityTracker VelocityTracker是指速度追踪，用于最终手势在滑动过程的速度。包括水平和竖直方向的速度。
使用:
//在View的onTouchEvent的方法中追踪当前事件的速度 VelocityTracker velocityTracker = VelocityTracker.obtain(); velocityTracker.addMovement(event); //1000这个参数表示时间间隔，最终得到的速度代表着1000毫秒内划过的像素大小。 velocityTracker.computeCurrentVelocity(1000); int xVelocity = (int) velocityTracker.getXVelocity(); int yVelocity = (int) velocityTracker.getYVelocity(); //不需要是，调用clear方法回收并重置内存 velocityTracker.clear(); velocityTracker.recycle(); 注意:和Android坐标轴相同方向结果为正，相反方向为负
6.GestureDetector GestureDetector即手势检测，用于辅助检测用户的单击，滑动，长按，双击等行为.
GestureDetector内部的Listener接口：
 OnGestureListener，这个Listener监听一些手势，如单击、滑动、长按等操作： OnDoubleTapListener，这个Listener监听双击和单击事件。 OnContextClickListener，鼠标右键(加入外设) SimpleOnGestureListener，实现了上面三个接口的类，拥有上面三个的所有回调方法。  使用：
 实例化GestureDetectorCompat类 实现OnGestureListener/OnGestureListener/SimpleOnGestureListener接口 接管目标View的OnTouchEvent方法  public class MainActivity extends AppCompatActivity { private static final String TAG = &amp;quot;MainActivity&amp;quot;; GestureDetector mGestureDetector; GestureDetector.SimpleOnGestureListener mSimpleOnGestureListener = new GestureDetector.SimpleOnGestureListener() { @Override public boolean onSingleTapUp(MotionEvent e) { Log.d(TAG, &amp;quot;onSingleTapUp: 手指(轻触)送开&amp;quot;); return false; } //手指(轻触)送开 @Override public void onLongPress(MotionEvent e) { //长按 } @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) { //按下并拖动 return false; } @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { //按下触碰长按并松开 return false; } @Override public void onShowPress(MotionEvent e) { //手指轻触屏幕的一瞬间，尚未松开 } @Override public boolean onDown(MotionEvent e) { return false; } //手指轻触屏幕的一瞬间 @Override public boolean onDoubleTap(MotionEvent e) { Log.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%872View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</guid>
      <description>Android之View篇1————View的事件分发 一.目录 @[toc]
二.事件分发的基础认识 1. 事件分发是什么 事件分发就是对MotionEvent事件进行分发的过程，即当一个MotionEvent产生后，系统需要把这个事件传递(处理)给一个具体的View，这个过程就是分发过程。
2. 事件分发的简单过程 当一个点击事件产生后，一般顺序事件先传递到Activity，在传到ViewGroup，最终传到View。
3. 事件分发涉及的方法    方法 作用 调用时刻 返回值     dispathchTouchEvent 分发(传递)点击事件 事件传递给当前View时被调用 表示是否消耗当前事件   onTouchEvent 处理点击事件 在dispathchTouchEvent内部调用 表示是否消耗当前事件   onInterceptTouchEvent(只存在于ViewGroup) 判断是否拦截某个事件 在ViewGroup的dispatchTouchEvent（）内部调用 表示是否拦截当前事件    三者之间的关系可以用下面的伪代码表示
1 2 3 4 5 6 7 8 9 10  //在一个ViewGroup中 public boolen dispatchTouchEvent（）{ boolen consume = false； if(onInterceptTouchEvent){ consume = onTouchEvent(ev); //如果被拦截，调用当前viewGroup的onTouchEvent 	}else{ consume = child.dispatchTouchEvent(); //如果未被拦截，调用当前的子view的dispatchTouchEvent，即事件传递给子view 	} return consume; }   三.图解事件分发 1. 图示事件分发 (ACTION_DOWN) 2. 图示事件分发的说明  图分为3层，从上向下以此为Activity，ViewGroup，View 箭头中间的值代表方法返回值，（return true，return false ，return super.xxxx）,super意思是调用父类实现。 dispatchTouchEvent和 onTouchEvent 对应的消费表示的意思是，该事件就此消费，不会继续往别的地方传来，事件终止。 上面图的事件是针对ACTION_DOWN的，对于ACTION_MOVE和ACTION_UP我们最后做分析。  3. 图示事件分发的结论 1.如果整个事件不被中断，那么整个事件就是一个类U型图。 如果我们没有对控件里面的方法进行重写或者改变返回值。而直接调用super调用父类的默认实现，那么整个事件如下图所示。(前提:子Veiw都不消耗事件，即默认不可点击） 2. dispatchTouchEvent 和 onTouchEvent 一旦return true,事件就停止传递了（到达终点） 如下图所示，只有return turn事件就不会继续传下去，也就是我们常说的事件被消费了。 3.dispatchTouchEvent和onTouchEven一旦return false事件都会回传给父控件onTouchEvent 如下图所示，触Activity外，一旦进行了return false，都将事件传递给了父控件的onTouchEvent。
 对于dispatchTouchEvent 返回false的含义：事件停止往子View传递和分发，同时开始往父控件回溯。 对于onTouchEvent返回false的含义:表示当前View不消耗次事件，并且让事件继续往父空间的方向流动，   4.onInterceptTouchEvent 的作用 Intercept表示拦截，在ViewGroup进行分发是，会询问拦截器是否需要拦截。
 return false：不拦截，继续向子View传递事件 return ture: 拦截，自己对事件进行处理，将事件传递给自己的onTouchEvebt。 super：默认情况下不拦截，继续向子View传递事件   4. 关于ACTION_MOVE 和 ACTION_UP 上面的讲解都是针对的ACTION_DOWN,ACTION_MOVE和ACTION_UP和ACTION_DOWN在传递过程中和ACTION_DOWN并不相同。
简单来说，只有前一个事件返回了true时，才会收到ACTION_MOVE和ACTION_UP的事件。并且而最终会将ACTION_MOVE和ACTION_UP分发到消费到ACTION_DOWN的View手中。在分发的过程中，ACTION_MOVE和ACTION_UP与ACTION_DOWN分发的路线可能不回完全相同。
例如: 红色的箭头代表ACTION_DOWN 事件的流向 蓝色的箭头代表ACTION_MOVE 和 ACTION_UP 事件的流向 四.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%873View%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>Android之View篇3————View滑动冲突的解决 一. 目录 @[toc]
二. 前言 滑动冲突也算是在开发中经常遇到的问题，在去年做Everyday时，就碰到过这个问题，当时在百度中找到了问题的解决方法，只不过一直处于不知其所以然。今天我就想系统的整理下关于滑动冲突的解决。
阅读本篇前，建议阅读我的前一篇博客,View的事件分发机制。滑动冲突的解决方法就是基于View的事件分发机制的基础上的。
三. 常见滑动冲突的场景 常见的滑动冲突场景可以简单分为以下3种:
 场景1——外部滑动方向和内部滑动方向不一致 场景2——外部滑动方向和内部滑动方向一致 场景3——上面两种情况的嵌套   场景1:主要是将ViewPager和Fragment配合使用的情况，所组成的页面滑动效果，在这种效果中，可以通过左右滑动来切换画面，而每个页面内部往往又是一个listView，这种情况下本来是有滑动冲突的，但viewPager内部处理了这种滑动冲突，但如果我们采用的是ScrollView时，就必须手动处理滑动冲突。
场景2：这种情况下，当内外层都存在同一个方向可以滑动的时候，就存在一个逻辑问题时，当手指开始滑动时，系统无法知道用户到底想让那一层滑动，所以当手指滑动时，就会出现问题，要么只有一层滑动，要么滑动很卡顿。
场景3：场景三是场景一和场景2的嵌套，所以场景3的滑动冲突看起来更加复杂，但它只不过是几个单一的滑动冲突的叠加，因此，只要分别处理外层和中层，中层和内层的滑动冲突即可。
四. 滑动冲突的处理规则 1. 场景1的处理规则 对于场景1的处理规则是，当用户左右滑动时，需要让外部的View拦截点击事件，当用户上下滑动时，需要让内部的View拦截点击事件。具体来说就是根据他是水平滑动还是竖直滑动来确定到底是由谁来解决滑动冲突。
如何判断水平滑动还是竖直滑动:
 依据滑动路径和水平方向所形成的夹角 依据水平方向和竖直水平的距离差 依据水平速度和竖直水平的距离差  2. 场景2的处理规则 场景2比较特殊，他无法根据滑动的角度，距离差和速度差来判断，但他一般都能在业务上找到突破点。比如，业务规定，当处于某种状态时是，外部View响应，当处于另一种状态时，内部View响应。根据这个规则对滑动进行相应的处理。
3. 场景3的处理规则 对于场景3来说，它的滑动规则更复杂，和场景2一样，它也无法根据滑动的角度，距离差和速度差来判断，同样只能通过业务上找到突破点。
五. 滑动冲突的解决方式 针对滑动冲突，一般有两种解决方案，即内部拦截法和外部拦截法
1. 外部拦截法 思路 外部拦截是指点击事件都要经过父容器的拦截处理，如果父容器需要次事件则拦截，如果不需要则不拦截。这种方法比较符合点击事件的分发机制。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。 伪代码
 @Override public boolean onInterceptTouchEvent(MotionEvent ev) { boolean intercepted = false; int x = (int) ev.getX(); int y = (int) ev.getY(); switch (ev.getAction()){ case MotionEvent.ACTION_DOWN:{ intercepted = false; break; } case MotionEvent.ACTION_MOVE:{ if(父容器需要当前点击事件){ intercepted = true; }else { intercepted = false; } } case MotionEvent.ACTION_UP:{ intercepted = false; break; } default: break; } mLastXIntercept = x; mLastYIntercept = y; return intercepted; } 解释 上面就是外部拦截法的典型逻辑，针对不同的滑动冲突，只需要修改当前点击事件这个条件即可。
在onInterceptTouchEvent方法中，首先是ACTION_DOWN这个事件，父容器必须返回false，即不拦截ACTION_DOWN,这是因为一旦父容器拦截ACTION _DOWM,那么后续的ACTION_MOVE和ACTION_UP事件都会直接交给父容器处理。其次ACTION_MOVE事件，这个事件可以根据需求是否拦截。最后是ACTION_UP事件，这里必须返回false,因为ACTION_UP事件本身没有太多意义。
2. 内部拦截法 思路 内部拦截是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和Android的事件分发机制不一样，需要配合requestDisallowInterceptTouchEvent方法才能运作。
伪代码 重写子元素的dispatchTouchEvent方法:
@Override public boolean dispatchTouchEvent(MotionEvent event) { int x = (int) event.getX(); int y = (int) event.getY(); switch (event.getAction()){ case MotionEvent.ACTION_DOWN:{ parent.requestDisallowInterceptTouchEvent(true); break; } case MotionEvent.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%874View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>Android之View篇4————View的工作原理 一. 目录 @[toc]
二. 初识DecorView和ViewRoot 1. DecorView DecorView是整个Window界面的最顶层View。DecorView只有一个子元素为LinearLayout。代表整个Window界面，包含通知栏，标题栏，内容显示栏三块区域。LinearLayout里有两个FrameLayout子元素。如图： 所以在Activity中，设定View是设定给cintent的。获得content的方法 ViewGroup = （ViewGroup）findViewById（R.id.content）。如何得到设定的View，content.getChildAt(0)
2. ViewRoot ViewRoot对应的是ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程都是通过ViewRoot来完成。在ActivityThread中，当Activity对象被创建时，会将DecorView添加到Window，同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView对象。
3. View的工作流程概述 view的绘制是从ViewRoot的performTraversals方法开始的，它经历过measure，layout和draw三个过程才最终将一个View绘制出来。其中measure用来测量View的宽和高，layout用来确定View在父容器的放置位置，而Draw则负责将View绘制在屏幕上。大致流程如下： 三. MeasureSpec 1. MeasureSpec源码 MeasureSpec代表一个32位int值。高2位表示SpecMode（测量模式），低30位表示specSize（当前测量模式下的规格大小）
MeasureSpec源码:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  //部分重点代码  private static final int MODE_SHIFT = 30; private static final int MODE_MASK = 0x3 &amp;lt;&amp;lt; MODE_SHIFT; public static final int UNSPECIFIED = 0 &amp;lt;&amp;lt; MODE_SHIFT; //父容器不对View有任何限制，要多大给到大  //这种情况一般用于系统内部，表示一直测量出状态  public static final int EXACTLY = 1 &amp;lt;&amp;lt; MODE_SHIFT; //父容器已经检测出View的精确的大小，这时候View的最终大小就是SpecSize确定的值  //它对于LayoutParams中的match_parent和具体数值这两种模式  public static final int AT_MOST = 2 &amp;lt;&amp;lt; MODE_SHIFT;//父容器指定一个可用大小，View的大小不能大于这个值。它对应LayoutParent中的wrap_content  public static int makeMeasureSpec(@IntRange(from = 0, to = (1 &amp;lt;&amp;lt; MeasureSpec.MODE_SHIFT) - 1) int size, //将 size和mode打包成一个MeasureSpec  @MeasureSpecMode int mode) { if (sUseBrokenMakeMeasureSpec) { return size + mode; } else { return (size &amp;amp; ~MODE_MASK) | (mode &amp;amp; MODE_MASK); } } public static int getMode(int measureSpec) { //MeasureSpec解包出mode  //noinspection ResourceType  return (measureSpec &amp;amp; MODE_MASK); } public static int getSize(int measureSpec) { //MeasureSpec解包出size  return (measureSpec &amp;amp; ~MODE_MASK); }   通过源码可知，MeasureSpec共有3种模式，同时可以将size和mode打包成一个MeasureSpec，也可以解包出size和mode。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%875%E8%87%AA%E5%AE%9A%E4%B9%89View/</guid>
      <description>Android之View篇5————自定义View 一.目录 @[toc]
二.自定义View的分类 1.继承View重写onDraw方法 主要用来实现一些不规则的效果，这种效果不方便用布局组合的方式达到，通常需要静态或者动态的显示一些不规则的图形，这种需要绘制的需要自己支持wrap_content,并支持padding。
2.继承ViewGroup派生出特殊的Layout 这种方式主要用于实现自定义布局，当某种效果看起来很像几种Veiw组合在一起的时候，可以采取这种方式来实现。这种方式复杂些，需要合适的处理ViewGroup的测量布局这两个过程，并同时处理子元素的测量和布局过程。
3.继承特定的View 这种方法比较常见，一般用于扩展已有的View功能，比如TextView，这种方法比较容易实现，这种方法不需要自己支持wrap_content和padding。
4.继承特定的ViewGroup 这种方发也比较常见，当某种效果看起来很想几种View组合在一起的时候，可以采用这种方法实现，这种方法不需要自己处理测量和布局两个过程，一般来说方法2介意实现的效果方法4也可以实现，区别在于方法2更接近低层。
三.自定义View注意事项 1 支持特殊属性  支持wrap_content 如果不在onMeasure（）中对wrap_content作特殊处理，那么wrap_content属性将失效 支持padding &amp;amp; margin 如果不支持，那么padding和margin（ViewGroup情况）的属性将失效 对于继承View的控件，padding是在draw()中处理 对于继承ViewGroup的控件，padding和margin会直接影响measure和layout过程  2.多线程应直接使用post方式 View的内部本身提供了post系列的方法，完全可以替代Handler的作用，使用起来更加方便、直接。
3.避免内存泄漏 主要针对View中含有线程或动画的情况：当View退出或不可见时，记得及时停止该View包含的线程和动画，否则会造成内存泄露问题。
 启动或停止线程/ 动画的方式：
  启动线程/动画：使用view.onAttachedToWindow（），因为该方法调用的时机是当包含View的Activity启动的时刻 停止线程/动画：使用view.onDetachedFromWindow（），因为该方法调用的时机是当包含View的Activity退出或当前View被remove的时刻  4.处理好滑动冲突 详情可看Android之View篇3————View滑动冲突的解决
四.自定义View的实例 实例：继承View实现一个圆形控件
1.继承View重写onDraw方法 a.CircleView继承View并重写onDraw方法
public class CircleView extends View { private int mColor = Color.RED; private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG); public CircleView(Context context) { super(context); init(); } public CircleView(Context context, AttributeSet attrs) { super(context, attrs, 0); init(); } public CircleView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } private void init() { mPaint.setColor(mColor); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); int width = getWidth() ; int height = getHeight(); int radius = Math.min(width, height) / 2; canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, mPaint);//画圆 } } b.布局文件
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot; android:orientation=&amp;quot;vertical&amp;quot;&amp;gt; &amp;lt;com.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/posts/AndroidView/Android%E4%B9%8BView%E7%AF%876%E4%BB%BF%E9%99%8C%E9%99%8C%E5%8D%A1%E7%89%87%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%B8%83%E5%B1%80/</guid>
      <description>Android之View篇6————仿陌陌卡片左右滑动选择控件 一.目录 @[toc]
二.效果图 三.业务需求梳理  卡片随着手指的移动进行移动 卡片在移动过程中，随着距离的加大，卡片绕z轴旋转 判断手指的移动方向，显示选择/删除图标，同时图标随距离的增大，透明度增加 手指离开卡片后，根据移动的距离，判断卡片是否移出屏幕，从左边移动还是右边移动 显示的卡片移出完后，增加新的卡片。 显示的4张卡片，需要展示出卡片的层次感  四.思路分析 根据上面的业务逻辑梳理，明显可以知道，实现该功能需要自定义两个View，一个是卡片View（TinderCardView），一个是卡片的容器（TinderStackLayout）。
需求1,2,3都是手指移动过程中发生，即MotionEvent的ACTION_MOVE事件中。
 MotionEvent 这一块不知道的可以看我前面写的博客Android之View篇2————View的事件分发
 需求4是在手指离开屏幕后中发生的，即MotionEvent的MotionEvent.ACTION_UP事件中
需求5是卡片动画结束后，判断剩余卡片数量，选择是否要加载新的卡片
需求6是加载新卡片时，要求实现的。
1. 新建TinderCardView类，并继承FrameLayout a.TinderCardView即展示信息的卡片类，重写其onTouch方法
 @Override public boolean onTouch(final View view, MotionEvent motionEvent) { TinderStackLayout tinderStackLayout = ((TinderStackLayout) view.getParent()); TinderCardView topCard = (TinderCardView) tinderStackLayout.getChildAt(tinderStackLayout.getChildCount() - 1); if (topCard.equals(view)) { switch (motionEvent.getAction()) { case MotionEvent.ACTION_DOWN: downX = motionEvent.getX(); downY = motionEvent.getY(); view.clearAnimation(); return true; case MotionEvent.ACTION_MOVE: newX = motionEvent.getX(); newY = motionEvent.getY(); dX = newX - downX; //手指移动距离 dY = newY - downY; float posX = view.getX() + dX; view.setX(view.getX() + dX); //view的新距离 需求1，卡片随手指的移动而移动 view.setY(view.getY() + dY); float rotation = (CARD_ROTATION_DEGREES * (posX)) / screenWidth; int halfCardHeight = (view.getHeight() / 2); if (downY &amp;lt; halfCardHeight - (2 * padding)) { view.setRotation(rotation); //设置View在Z轴上的旋转角度 需求2，卡片移动过程中，随距离的增大而，选择角度增大 } else { view.setRotation(-rotation); } float alpha = (posX - padding) / (screenWidth * 0.3f); if (alpha &amp;gt; 0) { //需求3, 判断手指的移动方向，显示选择/删除图标，同时图标随距离的增大，透明度增加 iv_tips.</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>http://blog.bingtan.online/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://blog.bingtan.online/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>http://blog.bingtan.online/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.bingtan.online/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>